#!/usr/bin/env python3
"""
Teste simples para validar a corre√ß√£o da atualiza√ß√£o do est√°gio do CRM.

Este teste verifica se a l√≥gica de atualiza√ß√£o do est√°gio foi adicionada corretamente.
"""

import re
import os

def test_crm_stage_update_logic():
    """
    Testa se a l√≥gica de atualiza√ß√£o do est√°gio do CRM foi adicionada ao c√≥digo.
    """
    print("üß™ Testando se a corre√ß√£o foi implementada corretamente...")
    
    # L√™ o arquivo do agente
    agent_file = "/Users/mateusmpz/Documents/Projetos Clientes - Code/agent-sdr-ia-solarprime/app/agents/agentic_sdr_stateless.py"
    
    with open(agent_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verifica se a corre√ß√£o foi implementada
    checks = [
        {
            "name": "Coment√°rio de atualiza√ß√£o do est√°gio",
            "pattern": r"# ATUALIZA O EST√ÅGIO DO LEAD PARA.*REUNI√ÉO AGENDADA.*NO CRM",
            "found": False
        },
        {
            "name": "Verifica√ß√£o do kommo_lead_id",
            "pattern": r"if lead_info\.get\(\"kommo_lead_id\"\):",
            "found": False
        },
        {
            "name": "Chamada para update_lead_stage",
            "pattern": r"await self\.crm_service\.update_lead_stage\(",
            "found": False
        },
        {
            "name": "Par√¢metro stage_name com reuni√£o_agendada",
            "pattern": r"stage_name=\"reuni√£o_agendada\"",
            "found": False
        },
        {
            "name": "Log de sucesso da atualiza√ß√£o",
            "pattern": r"emoji_logger\.system_success.*Lead.*movido para est√°gio.*Reuni√£o Agendada",
            "found": False
        },
        {
            "name": "Tratamento de erro com try/except",
            "pattern": r"except Exception as e:.*emoji_logger\.service_error.*Erro ao atualizar est√°gio",
            "found": False
        }
    ]
    
    # Executa as verifica√ß√µes
    for check in checks:
        if re.search(check["pattern"], content, re.DOTALL | re.IGNORECASE):
            check["found"] = True
            print(f"   ‚úÖ {check['name']}")
        else:
            print(f"   ‚ùå {check['name']}")
    
    # Verifica se todas as verifica√ß√µes passaram
    all_passed = all(check["found"] for check in checks)
    
    if all_passed:
        print("\nüéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("‚úÖ A corre√ß√£o foi implementada corretamente.")
        print("‚úÖ O sistema agora deve atualizar o est√°gio do lead no CRM ap√≥s agendar reuni√£o.")
        return True
    else:
        print("\n‚ùå ALGUMAS VERIFICA√á√ïES FALHARAM!")
        failed_checks = [check["name"] for check in checks if not check["found"]]
        print(f"Verifica√ß√µes que falharam: {failed_checks}")
        return False

def test_code_placement():
    """
    Verifica se a corre√ß√£o foi colocada no local correto do c√≥digo.
    """
    print("\nüß™ Verificando se a corre√ß√£o est√° no local correto...")
    
    agent_file = "/Users/mateusmpz/Documents/Projetos Clientes - Code/agent-sdr-ia-solarprime/app/agents/agentic_sdr_stateless.py"
    
    with open(agent_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Procura pela se√ß√£o relevante
    in_schedule_section = False
    found_qualification_creation = False
    found_crm_update = False
    found_post_workflow = False
    
    for i, line in enumerate(lines):
        if "if result and result.get(\"success\"):" in line:
            in_schedule_section = True
            print(f"   üìç Se√ß√£o de agendamento encontrada na linha {i+1}")
        
        if in_schedule_section:
            if "create_lead_qualification" in line:
                found_qualification_creation = True
                print(f"   ‚úÖ Cria√ß√£o de qualifica√ß√£o encontrada na linha {i+1}")
            
            if "update_lead_stage" in line:
                found_crm_update = True
                print(f"   ‚úÖ Atualiza√ß√£o do CRM encontrada na linha {i+1}")
            
            if "_execute_post_scheduling_workflow" in line:
                found_post_workflow = True
                print(f"   ‚úÖ Workflow p√≥s-agendamento encontrado na linha {i+1}")
                break
    
    # Verifica a ordem correta
    if found_qualification_creation and found_crm_update and found_post_workflow:
        print("\n‚úÖ A corre√ß√£o est√° no local correto!")
        print("   1. Cria√ß√£o de qualifica√ß√£o")
        print("   2. Atualiza√ß√£o do est√°gio no CRM (NOVA CORRE√á√ÉO)")
        print("   3. Execu√ß√£o do workflow p√≥s-agendamento")
        return True
    else:
        print("\n‚ùå A corre√ß√£o n√£o est√° no local correto ou est√° faltando algo.")
        return False

def main():
    """
    Executa todos os testes de valida√ß√£o.
    """
    print("üöÄ VALIDANDO A CORRE√á√ÉO DO EST√ÅGIO DO CRM")
    print("=" * 50)
    
    # Teste 1: Verifica se a l√≥gica foi implementada
    test1_passed = test_crm_stage_update_logic()
    
    # Teste 2: Verifica se est√° no local correto
    test2_passed = test_code_placement()
    
    print("\n" + "=" * 50)
    
    if test1_passed and test2_passed:
        print("üéâ VALIDA√á√ÉO COMPLETA - CORRE√á√ÉO IMPLEMENTADA COM SUCESSO!")
        print("\nüìã Resumo da corre√ß√£o:")
        print("   ‚úÖ Ap√≥s agendar reuni√£o com sucesso")
        print("   ‚úÖ Sistema verifica se existe kommo_lead_id")
        print("   ‚úÖ Chama crm_service.update_lead_stage()")
        print("   ‚úÖ Move lead para est√°gio 'reuni√£o_agendada'")
        print("   ‚úÖ Registra log de sucesso")
        print("   ‚úÖ Trata erros adequadamente")
        print("   ‚úÖ Continua fluxo normal mesmo se CRM falhar")
        print("\nüöÄ A corre√ß√£o est√° pronta para ser testada em produ√ß√£o!")
        return True
    else:
        print("‚ùå VALIDA√á√ÉO FALHOU - CORRE√á√ÉO INCOMPLETA")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)