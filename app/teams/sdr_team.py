"""
SDR Team - Equipe Principal de Vendas Solar Prime
Implementa√ß√£o com AGNO Teams Framework em modo COORDINATE
"""

import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime
from enum import Enum

from agno.agent import Agent
from agno.team import Team
from agno.models.google import Gemini
# from agno.models.openai import OpenAIChat  # Temporarily disabled due to compatibility issues
# from agno.memory import AgentMemory  # DESABILITADO - causando erros com m√©todos inexistentes
# from agno.storage.postgres import PostgresStorage  # DESABILITADO - n√£o necess√°rio sem memory
from loguru import logger
from app.utils.logger import emoji_logger
from app.utils.optional_storage import OptionalStorage
from app.utils.retry_handler import async_retry, GEMINI_RETRY_CONFIG

from app.config import settings
from app.integrations.supabase_client import supabase_client

# Import dos agentes especializados (ser√£o criados em seguida)
# QualificationAgent REMOVIDO - l√≥gica migrada para AgenticSDR
# KnowledgeAgent REMOVIDO - substitu√≠do por KnowledgeService
from app.teams.agents.calendar import CalendarAgent
from app.teams.agents.followup import FollowUpAgent
from app.teams.agents.crm import CRMAgent
# BillAnalyzerAgent REMOVIDO - substitu√≠do por fun√ß√£o simples no AgenticSDR
# from app.teams.agents.bill_analyzer import BillAnalyzerAgent

import re
from datetime import datetime, timedelta


class ConversationStage(Enum):
    """Est√°gios da conversa com o lead"""
    INITIAL_CONTACT = "initial_contact"
    IDENTIFYING_NEED = "identifying_need"
    QUALIFYING = "qualifying"
    DISCOVERY = "discovery"
    PRESENTING_SOLUTION = "presenting_solution"
    HANDLING_OBJECTIONS = "handling_objections"
    SCHEDULING = "scheduling"
    FOLLOW_UP = "follow_up"
    QUALIFIED = "qualified"


class SDRTeam:
    """
    Team Principal SDR Solar Prime
    Coordena todos os agentes especializados para qualifica√ß√£o e convers√£o de leads
    """
    
    def __init__(self):
        """Inicializa o Team SDR com todos os componentes"""
        self.is_initialized = False
        
        # Configura√ß√£o do PostgreSQL/Supabase com fallback
        # Storage persistente com fallback para mem√≥ria se PostgreSQL n√£o dispon√≠vel
        self.storage = OptionalStorage(
            table_name="sdr_team_sessions",  # Nome da tabela para sess√µes do team
            db_url=settings.get_postgres_url(),  # URL j√° inclui autentica√ß√£o
            schema="public",  # Schema do Supabase
            auto_upgrade_schema=True  # Auto-atualiza schema se necess√°rio
        )
        
        # Modelo principal - Gemini com fallback robusto
        self.model = None
        self.retry_count = 0
        self.max_retries = 5
        
        # Tenta usar Gemini 2.5 Flash (mais est√°vel que Pro)
        try:
            self.model = Gemini(
                id="gemini-2.5-flash",  # Usando Flash que √© mais est√°vel
                api_key=settings.google_api_key
            )
            emoji_logger.system_ready("SDR Team", model="gemini-2.5-flash")
        except Exception as e:
            emoji_logger.system_warning(f"Erro Gemini 2.5 Flash, tentando fallback: {e}")
            
            # Fallback para Gemini 2.0 Flash (n√£o experimental)
            try:
                self.model = Gemini(
                    id="gemini-2.0-flash",  # Vers√£o est√°vel, n√£o experimental
                    api_key=settings.google_api_key
                )
                emoji_logger.system_ready("SDR Team", model="gemini-2.0-flash (fallback)")
            except Exception as e2:
                emoji_logger.system_warning(f"Erro Gemini 2.0 Flash, √∫ltimo fallback: {e2}")
                
                # √öltimo fallback para Gemini 1.5 Flash (muito est√°vel)
                try:
                    self.model = Gemini(
                        id="gemini-1.5-flash",
                        api_key=settings.google_api_key
                    )
                    emoji_logger.system_ready("SDR Team", model="gemini-1.5-flash (emergency fallback)")
                except Exception as e3:
                    emoji_logger.system_error("SDR Team", f"Todos os modelos Gemini falharam: {e3}")
                    raise Exception("Imposs√≠vel inicializar modelo Gemini. Verifique a API key.")
        
        # DESABILITADO: AgentMemory causando erros com m√©todos inexistentes
        # O framework AGNO est√° tentando chamar m√©todos que n√£o existem:
        # - add_interaction_to_team_context
        # - get_team_context_str
        # Por enquanto, vamos funcionar sem mem√≥ria persistente
        self.memory = None
        logger.info("Team funcionar√° sem mem√≥ria persistente (AgentMemory desabilitado)")
        
        # Team Leader SIMPLIFICADO - Menos coordena√ß√£o, mais delega√ß√£o direta
        self.team_leader = Agent(
            name="Helen SDR Coordinator",
            model=self.model,
            instructions="""Voc√™ √© o coordenador simplificado do SDR Team.
            
            MISS√ÉO: Delega√ß√£o direta e r√°pida para os agentes corretos.
            
            REGRAS SIMPLES:
            1. Agenda/Calendar ‚Üí CalendarAgent
            2. CRM/Kommo ‚Üí CRMAgent  
            3. Follow-up ‚Üí FollowUpAgent
            4. An√°lise conta ‚Üí AgenticSDR direto (Vision AI)
            5. Resto ‚Üí AgenticSDR j√° resolve
            
            N√ÉO PENSE DEMAIS - APENAS DELEGUE R√ÅPIDO!""",
            tools=[],  # Team Leader n√£o precisa de tools diretas
            show_tool_calls=False,  # Simplificado
            markdown=False  # Mais direto
        )
        
        # Inicializar agentes especializados
        self._initialize_agents()
        
        # Criar o Team principal
        self.team = None  # Ser√° criado no initialize()
        
        emoji_logger.team_start("SDR", "Sistema inicializado")
    
    def _initialize_agents(self):
        """Inicializa agentes especializados baseado nas configura√ß√µes"""
        try:
            self.agents = []
            agents_initialized = []
            
            # QualificationAgent REMOVIDO - l√≥gica migrada para AgenticSDR
            # A qualifica√ß√£o agora √© feita diretamente pelo AgenticSDR seguindo prompt-agente.md
            self.qualification_agent = None
            emoji_logger.team_member_skip("QualificationAgent", "üîÑ Migrado para AgenticSDR")
            
            # Agente de Calend√°rio
            logger.info(f"üìÖ Verificando CalendarAgent - enable_calendar_agent: {settings.enable_calendar_agent}")
            
            if settings.enable_calendar_agent:
                logger.info("üìÖ ATIVANDO CalendarAgent...")
                self.calendar_agent = CalendarAgent(
                    model=self.model,
                    storage=self.storage
                )
                self.agents.append(self.calendar_agent)
                agents_initialized.append("CalendarAgent")
                emoji_logger.team_member_ready("CalendarAgent", "‚úÖ Habilitado")
                logger.info("‚úÖ CalendarAgent ATIVADO com sucesso!")
            else:
                self.calendar_agent = None
                emoji_logger.team_member_skip("CalendarAgent", "‚è≠Ô∏è Desabilitado")
                logger.warning(f"‚ö†Ô∏è CalendarAgent DESABILITADO - enable_calendar_agent: {settings.enable_calendar_agent}")
            
            # Agente de Follow-up
            if settings.enable_followup_agent:
                self.followup_agent = FollowUpAgent(
                    model=self.model,
                    storage=self.storage
                )
                self.agents.append(self.followup_agent)
                agents_initialized.append("FollowUpAgent")
                emoji_logger.team_member_ready("FollowUpAgent", "‚úÖ Habilitado")
            else:
                self.followup_agent = None
                emoji_logger.team_member_skip("FollowUpAgent", "‚è≠Ô∏è Desabilitado")
            
            # KnowledgeAgent REMOVIDO - substitu√≠do por KnowledgeService no AgenticSDR
            # As consultas √† knowledge base agora s√£o feitas diretamente via service
            self.knowledge_agent = None
            emoji_logger.team_member_skip("KnowledgeAgent", "üîÑ Substitu√≠do por KnowledgeService")
            
            # Agente CRM
            if settings.enable_crm_agent and settings.enable_crm_integration:
                self.crm_agent = CRMAgent(
                    model=self.model,
                    storage=self.storage
                )
                self.agents.append(self.crm_agent)
                agents_initialized.append("CRMAgent")
                emoji_logger.team_member_ready("CRMAgent", "‚úÖ Habilitado")
            else:
                self.crm_agent = None
                emoji_logger.team_member_skip("CRMAgent", "‚è≠Ô∏è Desabilitado")
            
            # BillAnalyzerAgent REMOVIDO - substitu√≠do por fun√ß√£o simples no AgenticSDR
            # A an√°lise de contas agora √© feita diretamente pelo AgenticSDR via Vision AI
            self.bill_analyzer_agent = None
            emoji_logger.team_member_skip("BillAnalyzerAgent", "üîÑ Substitu√≠do por fun√ß√£o Vision AI no AgenticSDR")
            
            emoji_logger.team_coordinate(f"Agentes inicializados: {', '.join(agents_initialized)}", agents_count=len(self.agents))
            
        except Exception as e:
            emoji_logger.system_error("SDR Team", f"Erro ao inicializar agentes: {e}")
            raise
    
    async def initialize(self):
        """Inicializa o Team e carrega recursos necess√°rios"""
        try:
            # Construir lista de membros apenas com agentes habilitados
            team_members = []
            
            # QualificationAgent removido - l√≥gica no AgenticSDR
            # if self.qualification_agent:
            #     team_members.append(self.qualification_agent.agent)
            
            if self.calendar_agent:
                team_members.append(self.calendar_agent.agent)
            
            if self.followup_agent:
                team_members.append(self.followup_agent.agent)
            
            # KnowledgeAgent removido - substitu√≠do por KnowledgeService
            # if self.knowledge_agent:
            #     team_members.append(self.knowledge_agent.agent)
            
            if self.crm_agent:
                team_members.append(self.crm_agent.agent)
            
            # BillAnalyzerAgent removido - an√°lise via AgenticSDR
            # if self.bill_analyzer_agent:
            #     team_members.append(self.bill_analyzer_agent.agent)
            
            # Verificar se h√° agentes habilitados
            if not team_members:
                emoji_logger.system_warning("Nenhum agente habilitado! AgenticSDR far√° tudo diretamente.")
                # QualificationAgent removido - AgenticSDR funciona independentemente
                # Sistema continuar√° funcionando com AgenticSDR fazendo qualifica√ß√£o direta
            
            # Preparar configura√ß√µes do Team
            team_config = {
                "name": "SDR Solar Prime Team",
                "mode": "coordinate",  # Team Leader delega e sintetiza
                "members": team_members,
                "description": """Equipe especializada em vendas de energia solar.
                
                O Team Leader (Helen) coordena os agentes:
                - CalendarAgent: Agenda reuni√µes e gerencia calend√°rio
                - FollowUpAgent: Nurturing e reengajamento  
                - CRMAgent: Integra√ß√£o com Kommo CRM
                - An√°lise de contas: feita diretamente pelo AgenticSDR via Vision AI
                
                NOTAS: 
                - Qualifica√ß√£o: feita diretamente pelo AgenticSDR
                - Knowledge Base: acessada via KnowledgeService pelo AgenticSDR""",
                
                "instructions": """
                INSTRU√á√ïES SIMPLIFICADAS:
                1. Agenda/reuni√£o ‚Üí CalendarAgent (direto)
                2. CRM/Kommo ‚Üí CRMAgent (direto)
                3. Follow-up ‚Üí FollowUpAgent (direto)
                4. An√°lise conta ‚Üí AgenticSDR direto (Vision AI)
                
                SEM AN√ÅLISE COMPLEXA - DELEGA√á√ÉO DIRETA E R√ÅPIDA!
                """,
                
                # Configura√ß√µes SIMPLIFICADAS
                "model": self.model,
                "show_tool_calls": False,  # Menos verboso
                "markdown": False,         # Mais direto
                "show_members_responses": False,  # Menos detalhes
                "debug_mode": False       # Sempre simplificado
            }
            
            # N√ÉO adicionar memory - causando erros no framework AGNO
            # team_config["memory"] = self.memory  # DESABILITADO
            logger.info("Team configurado sem mem√≥ria (melhor estabilidade)")
            
            # Criar o Team com configura√ß√µes
            self.team = Team(**team_config)
            
            # KnowledgeAgent removido - KnowledgeService n√£o precisa de inicializa√ß√£o especial
            # A knowledge base √© acessada diretamente pelo AgenticSDR via KnowledgeService
            emoji_logger.team_coordinate("KnowledgeService pronto para uso")
            
            self.is_initialized = True
            emoji_logger.system_ready("SDR Team", startup_time=1.0, agents_active=len(team_members))
            
        except Exception as e:
            emoji_logger.system_error("SDR Team", f"Erro na inicializa√ß√£o: {e}")
            raise
    
    async def process_message(
        self,
        phone: str,
        message: str,
        lead_data: Optional[Dict[str, Any]] = None,
        conversation_id: Optional[str] = None,
        media: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Processa mensagem do WhatsApp usando o Team
        
        Args:
            phone: N√∫mero do telefone
            message: Mensagem recebida
            lead_data: Dados do lead
            conversation_id: ID da conversa
            media: M√≠dia anexada
            
        Returns:
            Resposta do Team
        """
        try:
            if not self.is_initialized:
                await self.initialize()
            
            # Preparar contexto para o Team
            context = {
                "phone": phone,
                "message": message,
                "lead_data": lead_data or {},
                "conversation_id": conversation_id,
                "timestamp": datetime.now().isoformat(),
                "has_media": media is not None
            }
            
            # Se tem m√≠dia, adicionar ao contexto
            if media:
                context["media"] = {
                    "type": media.get("type"),
                    "mimetype": media.get("mimetype"),
                    "caption": media.get("caption", "")
                }
                
                # Se for imagem de conta, pr√©-processar
                if media.get("type") == "image":
                    context["needs_bill_analysis"] = True
                    context["media_data"] = media.get("data", "")
            
            # Preparar prompt para o Team
            # Verificar se h√° transcri√ß√£o de √°udio
            audio_transcription = None
            if media and media.get("type") == "audio":
                # Acessar diretamente o 'transcription' do dicion√°rio 'media'
                audio_transcription = media.get('transcription')
            
            team_prompt = f"""
            Mensagem do lead: {message}
            
            {f'''
            TRANSCRI√á√ÉO DE √ÅUDIO (CONTE√öDO REAL DA MENSAGEM):
            "{audio_transcription}"
            
            IMPORTANTE: Use a transcri√ß√£o acima como o conte√∫do principal da mensagem, n√£o a mensagem gen√©rica.
            ''' if audio_transcription else ''}
            
            Contexto:
            - Telefone: {phone}
            - Nome: {lead_data.get('name', 'N√£o informado')}
            - Est√°gio atual: {lead_data.get('qualification_stage', 'INITIAL_CONTACT')}
            - Valor da conta: R$ {lead_data.get('bill_value', 0):.2f}
            - Qualificado: {'Sim' if lead_data.get('is_qualified') else 'N√£o'}
            
            {"üìé Anexo: " + context.get('media', {}).get('type', '') if media else ""}
            
            Analise e responda apropriadamente, delegando para os agentes necess√°rios.
            """
            
            # Executar Team com streaming
            response_text = ""
            
            if settings.debug:
                # Modo debug: sem streaming
                result = await self.team.arun(
                    team_prompt,
                    context=context,
                    stream=False
                )
                response_text = result.content
            else:
                # Modo produ√ß√£o: com streaming
                async for chunk in await self.team.arun(
                    team_prompt,
                    context=context,
                    stream=True,
                    stream_intermediate_steps=True
                ):
                    if hasattr(chunk, 'content') and chunk.content is not None:
                        response_text += chunk.content
            
            # Atualizar contexto no banco
            await self._update_lead_context(phone, lead_data, response_text)
            
            # Salvar hist√≥rico
            await self._save_conversation_history(
                phone=phone,
                user_message=message,
                assistant_message=response_text,
                conversation_id=conversation_id
            )
            
            # Log de m√©tricas
            if hasattr(self.team, 'session_metrics'):
                metrics = self.team.session_metrics
                emoji_logger.team_coordinate(f"M√©tricas da sess√£o calculadas", **metrics)
            
            return response_text
            
        except Exception as e:
            emoji_logger.system_error("SDR Team", f"Erro ao processar mensagem: {e}")
            return "Ops! Tive um probleminha aqui üòÖ Voc√™ pode repetir, por favor?"
    
    async def _update_lead_context(
        self,
        phone: str,
        lead_data: Optional[Dict[str, Any]],
        response: str
    ):
        """Atualiza contexto do lead no banco"""
        try:
            if not lead_data:
                return
            
            # Extrair informa√ß√µes da sess√£o do Team
            team_state = getattr(self.team, 'team_session_state', {}) if self.team else {}
            
            # Preparar updates compat√≠veis com o schema atual
            updates = {
                "last_interaction": datetime.now().isoformat(),
                "current_stage": team_state.get("current_stage", "INITIAL_CONTACT"),
                "qualification_score": team_state.get("qualification_score", 0)
            }
            
            # Atualizar qualification_status baseado em is_qualified
            # (usar qualification_status ao inv√©s de is_qualified diretamente)
            if team_state.get("is_qualified", False):
                updates["qualification_status"] = "QUALIFIED"
            elif team_state.get("qualification_score", 0) == 0:
                updates["qualification_status"] = "PENDING"
            else:
                updates["qualification_status"] = "NOT_QUALIFIED"
            
            # Atualizar no Supabase
            await supabase_client.update_lead(
                lead_data.get("id"),
                updates
            )
            
        except Exception as e:
            emoji_logger.supabase_error(f"Erro ao atualizar contexto: {e}", table="leads")
    
    async def _save_conversation_history(
        self,
        phone: str,
        user_message: str,
        assistant_message: str,
        conversation_id: Optional[str]
    ):
        """Salva hist√≥rico da conversa"""
        try:
            # Salvar mensagem do usu√°rio
            await supabase_client.save_message(
                conversation_id=conversation_id,
                content=user_message,
                sender="user",
                metadata={"phone": phone}
            )
            
            # Salvar resposta do assistente
            await supabase_client.save_message(
                conversation_id=conversation_id,
                content=assistant_message,
                sender="assistant",
                metadata={
                    "phone": phone,
                    "team_used": True,
                    "agents_activated": self._get_activated_agents()
                }
            )
            
        except Exception as e:
            emoji_logger.supabase_error(f"Erro ao salvar hist√≥rico: {e}", table="conversations")
    
    def _get_activated_agents(self) -> List[str]:
        """Retorna lista de agentes que foram ativados na √∫ltima execu√ß√£o"""
        # TODO: Implementar tracking de agentes ativados
        return []
    
    def is_ready(self) -> bool:
        """Verifica se o Team est√° pronto"""
        return self.is_initialized
    
    def extract_meeting_info(self, text: str) -> Dict[str, Any]:
        """
        Extrai informa√ß√µes de agendamento do texto
        Retorna dados estruturados para agendamento real
        """
        info = {
            "date": None,
            "time": None,
            "email": None,
            "phone": None,
            "name": None,
            "duration": 30  # Padr√£o 30 minutos
        }
        
        # Extrair data (hoje, amanh√£, ou data espec√≠fica)
        text_lower = text.lower()
        if "hoje" in text_lower:
            info["date"] = datetime.now().strftime("%d/%m/%Y")
        elif "amanh√£" in text_lower:
            info["date"] = (datetime.now() + timedelta(days=1)).strftime("%d/%m/%Y")
        else:
            # Procurar por datas no formato DD/MM ou DD/MM/YYYY
            date_pattern = r'(\d{1,2})[/\-](\d{1,2})(?:[/\-](\d{2,4}))?'
            date_match = re.search(date_pattern, text)
            if date_match:
                day, month, year = date_match.groups()
                if year:
                    year = year if len(year) == 4 else f"20{year}"
                else:
                    year = str(datetime.now().year)
                info["date"] = f"{day.zfill(2)}/{month.zfill(2)}/{year}"
        
        # Extrair hor√°rio
        time_patterns = [
            r'(\d{1,2})[h:]\s*(\d{0,2})',  # 14h, 14:30, 14h30
            r'√†s\s*(\d{1,2})[h:]\s*(\d{0,2})',  # √†s 14h
            r'(\d{1,2})\s*(?:horas?)',  # 14 horas
        ]
        
        for pattern in time_patterns:
            time_match = re.search(pattern, text, re.IGNORECASE)
            if time_match:
                groups = time_match.groups()
                hour = groups[0]
                minute = groups[1] if len(groups) > 1 and groups[1] else "00"
                info["time"] = f"{hour.zfill(2)}:{minute.zfill(2)}"
                break
        
        # Extrair email
        email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
        email_match = re.search(email_pattern, text)
        if email_match:
            info["email"] = email_match.group(0).lower()
        
        # Extrair telefone
        phone_pattern = r'(?:55)?(\d{2})[\s\-]?(\d{4,5})[\s\-]?(\d{4})'
        phone_match = re.search(phone_pattern, text)
        if phone_match:
            info["phone"] = ''.join(phone_match.groups())
        
        # Extrair dura√ß√£o se mencionada
        if "1 hora" in text_lower or "uma hora" in text_lower:
            info["duration"] = 60
        elif "45 min" in text_lower:
            info["duration"] = 45
        elif "15 min" in text_lower:
            info["duration"] = 15
        elif "2 hora" in text_lower or "duas hora" in text_lower:
            info["duration"] = 120
        
        return info
    
    async def process_message_with_context(
        self,
        enriched_context: Dict[str, Any]
    ) -> str:
        """
        Processa mensagem com contexto enriquecido do AGENTIC SDR
        
        Args:
            enriched_context: Contexto completo incluindo an√°lise e recomenda√ß√µes
            
        Returns:
            Resposta do Team especializado
        """
        try:
            if not self.is_initialized:
                await self.initialize()
            
            # Extrair informa√ß√µes do contexto enriquecido
            phone = enriched_context.get("phone")
            message = enriched_context.get("message")
            lead_data = enriched_context.get("lead_data", {})
            conversation_id = enriched_context.get("conversation_id")
            context_analysis = enriched_context.get("context_analysis", {})
            emotional_triggers = enriched_context.get("emotional_triggers", {})
            recommended_agent = enriched_context.get("recommended_agent")
            reasoning = enriched_context.get("reasoning")
            multimodal_result = enriched_context.get("multimodal_result")
            
            # Atualizar estado do Team com contexto
            if self.team:
                # Garantir que team_session_state existe
                if not hasattr(self.team, 'team_session_state'):
                    self.team.team_session_state = {}
                
                if self.team.team_session_state is not None:
                    self.team.team_session_state.update({
                        "context_analysis": context_analysis,
                        "emotional_state": emotional_triggers.get("dominant_emotion"),
                        "recommended_agent": recommended_agent,
                        "decision_reasoning": reasoning
                    })
                else:
                    self.team.team_session_state = {
                        "context_analysis": context_analysis,
                        "emotional_state": emotional_triggers.get("dominant_emotion"),
                        "recommended_agent": recommended_agent,
                        "decision_reasoning": reasoning
                    }
            
            # Preparar prompt especializado baseado no agente recomendado
            specialized_prompt = f"""
            CONTEXTO ENRIQUECIDO DA HELEN CORE:
            
            Mensagem: {message}
            
            An√°lise Contextual:
            - Contexto Principal: {context_analysis.get('primary_context')}
            - Est√°gio de Decis√£o: {context_analysis.get('decision_stage')}
            - N√≠vel de Engajamento: {context_analysis.get('lead_engagement_level')}
            - Urg√™ncia: {context_analysis.get('urgency_level')}
            
            Sinais de Qualifica√ß√£o:
            - Valor da Conta: R$ {context_analysis.get('qualification_signals', {}).get('bill_value', 0):.2f}
            - Tem Poder de Decis√£o: {context_analysis.get('qualification_signals', {}).get('has_decision_power')}
            - Timeline Mencionado: {context_analysis.get('qualification_signals', {}).get('timeline_mentioned')}
            
            Estado Emocional:
            - Emo√ß√£o Dominante: {emotional_triggers.get('dominant_emotion')}
            - Indicadores de Frustra√ß√£o: {emotional_triggers.get('frustration_indicators')}
            - Indicadores de Entusiasmo: {emotional_triggers.get('excitement_indicators')}
            """
            
            # Adicionar informa√ß√£o de m√≠dia se houver
            if multimodal_result and multimodal_result.get('type') == 'audio' and multimodal_result.get('transcription'):
                specialized_prompt += f"""
            TRANSCRI√á√ÉO DE √ÅUDIO:
            "{multimodal_result.get('transcription', 'N√£o dispon√≠vel')}"
            (Dura√ß√£o: {multimodal_result.get('duration', 0)}s, Engine: {multimodal_result.get('engine', 'N/A')})
            
            IMPORTANTE: Use ESTA TRANSCRI√á√ÉO como o conte√∫do real da mensagem do usu√°rio.
            """
            elif multimodal_result:
                specialized_prompt += f"\n            An√°lise de M√≠dia: {multimodal_result}"
            
            specialized_prompt += f"""
            
            AGENTE RECOMENDADO: {recommended_agent}
            RAZ√ÉO: {reasoning}
            
            Por favor, processe esta solicita√ß√£o com expertise especializada.
            Foque em: {context_analysis.get('recommended_action')}
            """
            
            # Executar com o agente espec√≠fico se recomendado
            if recommended_agent:
                logger.info(f"üìÖ AGENT RECOMENDADO: {recommended_agent}")
                logger.info(f"üìÖ Raz√£o: {reasoning}")
                
                # Verificar se √© CalendarAgent - EXECUTAR DIRETAMENTE, N√ÉO SIMULAR!
                if recommended_agent == "CalendarAgent":
                    logger.info("üóìÔ∏è ATIVANDO CalendarAgent para EXECU√á√ÉO REAL de agendamento!")
                    
                    if self.calendar_agent:
                        logger.info("‚úÖ CalendarAgent dispon√≠vel - EXECUTANDO AGENDAMENTO REAL...")
                        
                        # Extrair informa√ß√µes da reuni√£o
                        meeting_info = self.extract_meeting_info(message)
                        
                        # Se n√£o tiver data/hora, usar padr√µes inteligentes
                        if not meeting_info['date']:
                            meeting_info['date'] = datetime.now().strftime("%d/%m/%Y")
                        if not meeting_info['time']:
                            meeting_info['time'] = "14:00"  # Hor√°rio padr√£o
                        if not meeting_info['email'] and lead_data:
                            meeting_info['email'] = lead_data.get('email', '')
                        
                        # EXECUTAR AGENDAMENTO REAL VIA CALENDAR AGENT
                        logger.info(f"üöÄ CRIANDO EVENTO REAL: {meeting_info['date']} √†s {meeting_info['time']}")
                        
                        try:
                            # Chamar o m√©todo schedule_meeting do CalendarAgent com assinatura correta
                            nome_lead = lead_data.get('name', 'Cliente')
                            result = await self.calendar_agent.schedule_meeting(
                                lead_id=lead_data.get('id', phone),
                                title=f"‚òÄÔ∏è Solar Prime - Reuni√£o com {nome_lead}",
                                date=meeting_info['date'],  # formato DD/MM/YYYY
                                time=meeting_info['time'],  # formato HH:MM
                                duration_minutes=60,  # Sempre 1 hora
                                meeting_type="presentation",
                                attendee_emails=[meeting_info['email']] if meeting_info['email'] else [],
                                description=f"Ol√° {nome_lead}! üòä\n\nSeja muito bem-vindo(a) √† Solar Prime! ‚òÄÔ∏è\n\nEstamos muito felizes em ter voc√™ conosco nesta reuni√£o que ser√° super proveitosa!\n\nVamos apresentar como voc√™ pode economizar at√© 95% na sua conta de energia com nossa solu√ß√£o de energia solar.\n\nTenha em m√£os sua √∫ltima conta de energia para conversarmos sobre os valores e economia.\n\nAt√© breve!\nEquipe Solar Prime",
                                location="Online"
                            )
                            
                            if result:
                                event_id = result.get('google_event_id', 'Aguardando confirma√ß√£o')
                                logger.info(f"‚úÖ REUNI√ÉO AGENDADA COM SUCESSO! Event ID: {event_id}")
                                
                                # Retornar mensagem de confirma√ß√£o REAL com tags RESPOSTA_FINAL
                                return f"""<RACIOCINIO>
CalendarAgent executou agendamento real no Google Calendar
Event ID: {result.get('google_event_id')}
Meet Link: {result.get('meet_link', 'Ser√° gerado')}
</RACIOCINIO>

<RESPOSTA_FINAL>
√ìtimo! Sua reuni√£o est√° confirmada!

Data: {meeting_info['date']} √†s {meeting_info['time']}
Convite: {meeting_info['email'] if meeting_info['email'] else 'Ser√° enviado em breve'}
Google Meet: {result.get('meet_link', 'Link ser√° gerado')}

Voc√™ receber√° lembretes 24 horas antes e 2 horas antes da reuni√£o, t√° bom?

At√© l√°!
</RESPOSTA_FINAL>"""
                            else:
                                error_msg = result.get('error', 'Erro ao criar evento') if result else 'Sem resposta'
                                logger.error(f"‚ùå Falha ao agendar: {error_msg}")
                                return f"""<RACIOCINIO>
CalendarAgent tentou agendar mas falhou
Erro: {error_msg}
</RACIOCINIO>

<RESPOSTA_FINAL>
Ops! Tive um pequeno problema aqui na agenda ao criar seu agendamento. 

Mas n√£o se preocupe! Posso tentar novamente. Me confirma
Qual dia voc√™ prefere e qual hor√°rio seria melhor para voc√™?

Vou garantir que tudo funcione perfeitamente!
</RESPOSTA_FINAL>"""
                                
                        except Exception as e:
                            logger.error(f"‚ùå Erro ao executar agendamento: {e}")
                            return f"""<RACIOCINIO>
CalendarAgent encontrou exce√ß√£o durante agendamento
Exce√ß√£o: {e}
</RACIOCINIO>

<RESPOSTA_FINAL>
Tive um probleminha t√©cnico ao criar seu agendamento.

Vamos fazer assim: me passa o melhor dia e hor√°rio para voc√™ que eu anoto aqui e nossa equipe confirma o agendamento, pode ser?

Qual seria o melhor momento para conversarmos sobre sua economia na conta de luz? üòä
</RESPOSTA_FINAL>"""
                    
                    else:
                        logger.error("‚ùå CalendarAgent N√ÉO est√° dispon√≠vel! Verifique as configura√ß√µes")
                        return """<RACIOCINIO>
CalendarAgent n√£o est√° dispon√≠vel no sistema
Configura√ß√£o pode estar desabilitada
</RACIOCINIO>

<RESPOSTA_FINAL>
Opa! Percebi que nosso sistema de agendamento est√° passando por uma manuten√ß√£o r√°pida.

Mas n√£o se preocupe! Tenho uma solu√ß√£o: 
- Me passa seu melhor dia e hor√°rio
- Anoto aqui e nossa equipe confirma em seguida

Qual seria o melhor momento para voc√™? Manh√£, tarde ou noite? üòä
</RESPOSTA_FINAL>"""
                
                # Para outros agentes, manter comportamento original
                else:
                    # Ativar agente espec√≠fico baseado na recomenda√ß√£o
                    emoji_logger.team_delegate(recommended_agent, "Processamento especializado")
                    
                    # Configurar instru√ß√µes espec√≠ficas para o Team Leader
                    self.team.instructions += f"\n\nPRIORIZE o {recommended_agent} para esta tarefa espec√≠fica"
            
            # Executar Team
            result = await self.team.arun(
                specialized_prompt,
                context=enriched_context,
                stream=False  # Sem streaming para respostas especializadas
            )
            
            response_text = result.content if hasattr(result, 'content') else str(result)
            
            # Atualizar contexto no banco
            await self._update_lead_context(phone, lead_data, response_text)
            
            # Log de m√©tricas especializadas
            emoji_logger.team_coordinate(f"Processamento conclu√≠do via {recommended_agent}")
            
            return response_text
            
        except Exception as e:
            emoji_logger.system_error("SDR Team", f"Erro no processamento: {e}")
            return "Deixa eu verificar isso melhor para voc√™..."
    
    async def cleanup(self):
        """Limpa recursos do Team"""
        try:
            # Limpar mem√≥ria
            if self.team:
                # Salvar m√©tricas finais
                if hasattr(self.team, 'full_team_session_metrics'):
                    metrics = self.team.full_team_session_metrics
                    emoji_logger.team_coordinate("M√©tricas finais calculadas", **metrics)
            
            logger.info("üîÑ SDR Team encerrado")
            
        except Exception as e:
            logger.error(f"Erro ao limpar Team: {e}")
    
    def get_metrics(self) -> Dict[str, Any]:
        """Retorna m√©tricas do Team"""
        if not self.team:
            return {}
        
        metrics = {
            "team_metrics": getattr(self.team, 'session_metrics', {}),
            "full_metrics": getattr(self.team, 'full_team_session_metrics', {}),
            "is_initialized": self.is_initialized
        }
        
        return metrics
    
    @async_retry(GEMINI_RETRY_CONFIG)
    async def _model_run_with_retry(self, *args, **kwargs):
        """Wrapper para adicionar retry autom√°tico √†s chamadas do modelo"""
        return self._original_run(*args, **kwargs)


# Factory function para criar o Team
def create_sdr_team() -> SDRTeam:
    """Cria e retorna uma inst√¢ncia do SDR Team"""
    return SDRTeam()


# Singleton global (opcional)
sdr_team_instance = None

async def get_sdr_team() -> SDRTeam:
    """Retorna inst√¢ncia singleton do SDR Team"""
    global sdr_team_instance
    
    if sdr_team_instance is None:
        sdr_team_instance = SDRTeam()
        await sdr_team_instance.initialize()
    
    return sdr_team_instance