"""
Google OAuth 2.0 API Endpoints
Gerencia fluxo de autoriza√ß√£o OAuth para Google Calendar
"""

from fastapi import APIRouter, HTTPException, Query
from fastapi.responses import RedirectResponse, HTMLResponse
from typing import Optional
import logging

from app.integrations.google_oauth_handler import get_oauth_handler
from app.utils.logger import emoji_logger

logger = logging.getLogger(__name__)

router = APIRouter(
    prefix="/google",
    tags=["Google OAuth"]
)


@router.get("/auth")
async def google_auth():
    """
    Inicia fluxo de autoriza√ß√£o OAuth 2.0
    Redireciona o usu√°rio para a tela de consentimento do Google
    """
    try:
        emoji_logger.service_call("GET /google/auth - Iniciando fluxo OAuth")

        logger.info("üîç Verificando configura√ß√£o OAuth...")
        logger.info(
            f"   Client ID configurado: "
            f"{'Sim' if get_oauth_handler().client_id else 'N√£o'}"
        )
        logger.info(
            f"   Client Secret configurado: "
            f"{'Sim' if get_oauth_handler().client_secret else 'N√£o'}"
        )
        logger.info(f"   Redirect URI: {get_oauth_handler().redirect_uri}")

        oauth_handler = get_oauth_handler()

        if not oauth_handler.client_id or not oauth_handler.client_secret:
            error_msg = (
                "OAuth n√£o configurado. Verifique GOOGLE_OAUTH_CLIENT_ID e "
                "GOOGLE_OAUTH_CLIENT_SECRET no .env"
            )
            logger.error(f"‚ùå {error_msg}")
            raise HTTPException(status_code=500, detail=error_msg)

        auth_url = oauth_handler.get_google_auth_url()

        if not auth_url:
            raise HTTPException(
                status_code=500,
                detail="Erro ao gerar URL de autoriza√ß√£o."
            )

        emoji_logger.system_success(
            f"Redirecionando para Google OAuth: {auth_url[:50]}..."
        )

        return RedirectResponse(url=auth_url)

    except HTTPException:
        raise
    except Exception as e:
        import traceback
        error_trace = traceback.format_exc()
        logger.error(
            f"‚ùå Erro detalhado no endpoint /google/auth:\n{error_trace}"
        )
        emoji_logger.service_error(f"Erro no endpoint /google/auth: {e}")

        return {
            "error": "Internal Server Error",
            "message": str(e),
            "details": "Verifique os logs para mais informa√ß√µes",
            "configuration": {
                "client_id_configured": bool(get_oauth_handler().client_id),
                "client_secret_configured": bool(
                    get_oauth_handler().client_secret
                ),
                "redirect_uri": get_oauth_handler().redirect_uri
            }
        }


@router.get("/callback")
async def google_callback(
    code: Optional[str] = Query(None),
    error: Optional[str] = Query(None),
    state: Optional[str] = Query(None)
):
    """
    Callback do Google OAuth 2.0
    Recebe o c√≥digo de autoriza√ß√£o e troca por tokens
    """
    try:
        emoji_logger.service_call(
            f"GET /google/callback - Code: {code[:20] if code else 'None'}..."
        )

        if error:
            emoji_logger.service_error(f"Erro no callback OAuth: {error}")
            return HTMLResponse(
                content=f"""
                <html>
                <head><title>Erro na Autoriza√ß√£o</title></head>
                <body><h1>‚ùå Erro na Autoriza√ß√£o</h1><p>{error}</p></body>
                </html>
                """,
                status_code=400
            )

        if not code:
            raise HTTPException(
                status_code=400,
                detail="C√≥digo de autoriza√ß√£o n√£o fornecido"
            )

        oauth_handler = get_oauth_handler()
        result = await oauth_handler.handle_google_callback(code)

        if result.get("success"):
            emoji_logger.system_success(
                "‚úÖ Autoriza√ß√£o OAuth conclu√≠da com sucesso!"
            )
            test_result = await oauth_handler.test_connection()
            return HTMLResponse(
                content=f"""
                <html>
                <head><title>Autoriza√ß√£o Conclu√≠da</title></head>
                <body>
                    <h1>‚úÖ Autoriza√ß√£o Conclu√≠da!</h1>
                    <p>Email: {test_result.get('user_email', 'N/A')}</p>
                    <p>Calend√°rio: {test_result.get('calendar_id', 'N/A')}</p>
                </body>
                </html>
                """
            )
        else:
            emoji_logger.service_error(
                f"Erro ao processar callback: {result.get('message')}"
            )
            return HTMLResponse(
                content=f"""
                <html>
                <head><title>Erro na Autoriza√ß√£o</title></head>
                <body>
                    <h1>‚ùå Erro ao Processar Autoriza√ß√£o</h1>
                    <p>{result.get('message', 'Erro desconhecido')}</p>
                </body>
                </html>
                """,
                status_code=500
            )

    except Exception as e:
        emoji_logger.service_error(f"Erro no callback OAuth: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/status")
async def google_oauth_status():
    """
    Verifica status da conex√£o OAuth com Google Calendar
    """
    try:
        oauth_handler = get_oauth_handler()
        result = await oauth_handler.test_connection()

        if result.get("success"):
            emoji_logger.system_success(
                f"OAuth conectado: {result.get('user_email')}"
            )
        else:
            emoji_logger.service_warning("OAuth n√£o configurado ou expirado")

        return {
            "oauth_configured": result.get("success", False),
            "user_email": result.get("user_email"),
            "calendar_id": result.get("calendar_id"),
            "can_create_meets": result.get("can_create_meets", False),
            "can_invite_attendees": result.get(
                "can_invite_attendees",
                False
            ),
            "message": result.get("message"),
            "auth_url": "/google/auth" if not result.get("success") else None
        }

    except Exception as e:
        emoji_logger.service_error(f"Erro ao verificar status OAuth: {e}")
        return {
            "oauth_configured": False,
            "message": str(e),
            "auth_url": "/google/auth"
        }
