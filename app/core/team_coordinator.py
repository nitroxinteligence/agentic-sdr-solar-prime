"""
Team Coordinator - Coordena√ß√£o SIMPLES de servi√ßos
ZERO complexidade, execu√ß√£o direta
"""

from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from uuid import uuid4
import asyncio
from app.utils.logger import emoji_logger
from app.config import settings

class TeamCoordinator:
    """
    Coordenador SIMPLES de servi√ßos (Calendar, CRM, FollowUp)
    Execu√ß√£o direta sem complexidade
    """
    
    def __init__(self):
        self.is_initialized = False
        self.services = {}
        self.decision_threshold = 0.3  # Threshold reduzido para ativa√ß√£o mais sens√≠vel
        
    async def initialize(self):
        """Inicializa√ß√£o ass√≠ncrona dos servi√ßos"""
        if self.is_initialized:
            return
            
        # Inicializar servi√ßos conforme configura√ß√£o
        await self._initialize_services()
        
        emoji_logger.system_ready(
            "üéØ TeamCoordinator inicializado",
            services=list(self.services.keys())
        )
        self.is_initialized = True
    
    async def _initialize_services(self):
        """Inicializa servi√ßos habilitados de forma SIMPLES"""
        
        # Calendar Service
        if settings.enable_calendar_agent:
            try:
                from app.services.calendar_service_100_real import CalendarServiceReal as CalendarService
                self.services["calendar"] = CalendarService()
                emoji_logger.service_ready("üìÖ Calendar Service pronto")
            except Exception as e:
                emoji_logger.service_error(f"Erro ao inicializar Calendar: {e}")
        
        # CRM Service  
        if settings.enable_crm_agent:
            try:
                from app.services.crm_service_100_real import CRMServiceReal as CRMService
                self.services["crm"] = CRMService()
                emoji_logger.service_ready("üìä CRM Service pronto")
            except Exception as e:
                emoji_logger.service_error(f"Erro ao inicializar CRM: {e}")
        
        # FollowUp Service
        if settings.enable_followup_agent:
            try:
                from app.services.followup_service_100_real import FollowUpServiceReal as FollowUpService
                self.services["followup"] = FollowUpService()
                emoji_logger.service_ready("üîÑ FollowUp Service pronto")
            except Exception as e:
                emoji_logger.service_error(f"Erro ao inicializar FollowUp: {e}")
    
    def analyze_service_need(self, message: str, context: Dict[str, Any]) -> Dict[str, float]:
        """
        Analisa necessidade de servi√ßos com threshold 0.6
        
        Args:
            message: Mensagem do usu√°rio
            context: Contexto da conversa
            
        Returns:
            Scores de necessidade por servi√ßo
        """
        scores = {
            "calendar": 0.0,
            "crm": 0.0,
            "followup": 0.0
        }
        
        message_lower = message.lower()
        
        # Calendar - palavras-chave reduzidas (10 essenciais)
        calendar_keywords = [
            "agendar", "marcar", "reuni√£o", "conversar", "leonardo",
            "hor√°rio", "dispon√≠vel", "data", "quando", "encontro"
        ]
        
        calendar_score = sum(1 for kw in calendar_keywords if kw in message_lower)
        scores["calendar"] = min(1.0, calendar_score * 0.15)  # Max 1.0
        
        # CRM - atualiza√ß√£o de lead
        crm_keywords = [
            "nome", "telefone", "email", "empresa", "conta",
            "valor", "consumo", "kwh", "endere√ßo", "cpf"
        ]
        
        crm_score = sum(1 for kw in crm_keywords if kw in message_lower)
        scores["crm"] = min(1.0, crm_score * 0.25)
        
        # FollowUp - reengajamento
        followup_keywords = [
            "lembrar", "retornar", "voltar", "depois", "pensar",
            "aguardar", "futuro", "pr√≥xima", "acompanhar", "followup",
            "ligue", "ligar", "dias", "semana", "amanh√£", "contato"
        ]
        
        followup_score = sum(1 for kw in followup_keywords if kw in message_lower)
        scores["followup"] = min(1.0, followup_score * 0.20)  # Aumentado para ativar mais facilmente
        
        # Boost baseado no contexto
        if context.get("action_needed") == "agendar":
            scores["calendar"] += 0.3
        elif context.get("action_needed") == "qualificar":
            scores["crm"] += 0.3
        elif context.get("action_needed") == "reengajar":
            scores["followup"] += 0.3
        
        # Normalizar scores
        for service in scores:
            scores[service] = min(1.0, scores[service])
        
        return scores
    
    async def execute_services(self, 
                              message: str,
                              context: Dict[str, Any],
                              lead_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Executa servi√ßos necess√°rios de forma DIRETA
        
        Args:
            message: Mensagem do usu√°rio
            context: Contexto analisado
            lead_info: Informa√ß√µes do lead
            
        Returns:
            Lista de resultados dos servi√ßos executados
        """
        results = []
        
        # Analisar necessidade
        scores = self.analyze_service_need(message, context)
        
        # Executar servi√ßos que passaram o threshold
        for service_name, score in scores.items():
            if score >= self.decision_threshold:
                emoji_logger.service_event(
                    f"üéØ Executando {service_name}",
                    score=f"{score:.2f}",
                    threshold=self.decision_threshold
                )
                
                result = await self._execute_single_service(
                    service_name,
                    message,
                    context,
                    lead_info
                )
                
                if result:
                    results.append(result)
        
        return results
    
    async def _execute_single_service(self,
                                     service_name: str,
                                     message: str,
                                     context: Dict[str, Any],
                                     lead_info: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Executa um servi√ßo espec√≠fico
        
        Args:
            service_name: Nome do servi√ßo
            message: Mensagem
            context: Contexto
            lead_info: Info do lead
            
        Returns:
            Resultado da execu√ß√£o ou None
        """
        if service_name not in self.services:
            emoji_logger.service_warning(f"Servi√ßo {service_name} n√£o dispon√≠vel")
            return None
        
        service = self.services[service_name]
        
        try:
            if service_name == "calendar":
                # Verificar disponibilidade ou agendar
                if "dispon√≠vel" in message.lower() or "hor√°rio" in message.lower():
                    result = await service.check_availability(message)
                else:
                    # Extrair data/hora da mensagem
                    date_time = self._extract_datetime(message)
                    if date_time:
                        result = await service.schedule_meeting(
                            date_time["date"],
                            date_time["time"],
                            lead_info
                        )
                        
                        # üöÄ WORKFLOW COMPLETO P√ìS-AGENDAMENTO
                        if result and result.get("success"):
                            await self._execute_post_scheduling_workflow(
                                result,
                                lead_info,
                                context
                            )
                    else:
                        result = await service.suggest_times(lead_info)
                
            elif service_name == "crm":
                # Atualizar lead no CRM
                result = await service.create_or_update_lead(lead_info)
                
                # Capturar o lead_id retornado e adicionar ao lead_info
                if result.get("success") and result.get("lead_id"):
                    lead_id = result["lead_id"]
                    lead_info["id"] = lead_id  # Armazenar para uso futuro
                    
                    # Atualizar est√°gio se necess√°rio
                    if lead_info.get("stage"):
                        await service.update_lead_stage(
                            lead_id,  # Usar o lead_id correto
                            lead_info["stage"]
                        )
                    
                    # üöÄ SINCRONIZA√á√ÉO AUTOM√ÅTICA COM KOMMO
                    # Ap√≥s criar/atualizar no CRM, sincronizar com campos din√¢micos
                    try:
                        emoji_logger.service_event("üîÑ Sincronizando campos din√¢micos e tags")
                        sync_result = await self.sync_lead_to_crm(lead_info)
                        if sync_result.get("success"):
                            emoji_logger.system_success("‚úÖ Tags e campos personalizados sincronizados")
                    except Exception as sync_error:
                        emoji_logger.service_warning(f"Sync opcional falhou: {sync_error}")
                    
            elif service_name == "followup":
                # Agendar follow-up
                phone = lead_info.get("phone", "")
                name = lead_info.get("name", "Cliente")
                bill_value = lead_info.get("bill_value", 0)
                
                # üõ°Ô∏è VALIDA√á√ÉO: Verificar se phone_number √© v√°lido
                if not phone or phone.strip() == "":
                    emoji_logger.service_warning("Phone number vazio - follow-up n√£o agendado")
                    result = {
                        "success": False,
                        "error": "Phone number is required for follow-up"
                    }
                    return None
                
                # Gerar mensagem personalizada para follow-up
                message = f"Oi {name}! Helen da SolarPrime aqui. "
                message += f"Vou entrar em contato com voc√™ em breve para continuarmos nossa conversa sobre energia solar. "
                if bill_value > 0:
                    message += f"J√° preparei uma an√°lise especial para sua conta de R$ {bill_value}. "
                message += "At√© logo! ‚òÄÔ∏è"
                
                # Calcular delay em horas baseado no contexto
                urgency = context.get("urgency_level", "normal")
                if urgency == "alta":
                    delay_hours = 24
                elif urgency == "m√©dia":
                    delay_hours = 72
                else:
                    delay_hours = 168  # 7 dias
                
                # Chamar com argumentos corretos
                result = await service.schedule_followup(
                    phone_number=phone,
                    message=message,
                    delay_hours=delay_hours,
                    lead_info=lead_info
                )
            
            else:
                result = None
            
            if result and result.get("success"):
                emoji_logger.service_event(
                    f"‚úÖ {service_name} executado com sucesso",
                    result=result.get("message", "")
                )
                return {
                    "service": service_name,
                    "success": True,
                    "data": result
                }
            
        except Exception as e:
            emoji_logger.service_error(
                f"Erro ao executar {service_name}: {e}"
            )
        
        return None
    
    def _extract_datetime(self, text: str) -> Optional[Dict[str, str]]:
        """
        Extrai data e hora do texto (SIMPLES)
        
        Args:
            text: Texto com data/hora
            
        Returns:
            Dict com date e time ou None
        """
        import re
        from datetime import datetime, timedelta
        
        text_lower = text.lower()
        
        # Padr√µes simples
        hoje = datetime.now()
        
        # Detectar "hoje", "amanh√£", "depois de amanh√£"
        if "hoje" in text_lower:
            date = hoje.strftime("%Y-%m-%d")
        elif "amanh√£" in text_lower:
            date = (hoje + timedelta(days=1)).strftime("%Y-%m-%d")
        elif "depois de amanh√£" in text_lower:
            date = (hoje + timedelta(days=2)).strftime("%Y-%m-%d")
        else:
            # Tentar extrair data no formato DD/MM
            date_match = re.search(r"(\d{1,2})[/-](\d{1,2})", text)
            if date_match:
                day = int(date_match.group(1))
                month = int(date_match.group(2))
                year = hoje.year
                date = f"{year}-{month:02d}-{day:02d}"
            else:
                date = None
        
        # Extrair hora
        time_match = re.search(r"(\d{1,2})[h:](\d{0,2})", text_lower)
        if time_match:
            hour = int(time_match.group(1))
            minute = int(time_match.group(2)) if time_match.group(2) else 0
            time = f"{hour:02d}:{minute:02d}"
        else:
            # Detectar per√≠odos
            if "manh√£" in text_lower:
                time = "09:00"
            elif "tarde" in text_lower:
                time = "14:00"
            elif "noite" in text_lower:
                time = "19:00"
            else:
                time = "10:00"  # Default
        
        if date:
            return {"date": date, "time": time}
        
        return None
    
    def _calculate_followup_date(self, context: Dict[str, Any]) -> str:
        """
        Calcula data ideal para follow-up
        
        Args:
            context: Contexto da conversa
            
        Returns:
            Data no formato YYYY-MM-DD
        """
        from datetime import datetime, timedelta
        
        urgency = context.get("urgency_level", "normal")
        stage = context.get("conversation_stage", "in√≠cio")
        
        # Calcular dias baseado em urg√™ncia e est√°gio
        if urgency == "alta":
            days = 1
        elif urgency == "m√©dia":
            days = 3
        elif stage in ["negocia√ß√£o", "qualifica√ß√£o"]:
            days = 2
        else:
            days = 7
        
        followup_date = datetime.now() + timedelta(days=days)
        return followup_date.strftime("%Y-%m-%d")
    
    def get_service_status(self) -> Dict[str, Any]:
        """Retorna status dos servi√ßos"""
        return {
            "initialized": self.is_initialized,
            "threshold": self.decision_threshold,
            "services": {
                name: {
                    "enabled": name in self.services,
                    "ready": self.services.get(name) is not None
                }
                for name in ["calendar", "crm", "followup"]
            }
        }
    
    async def _execute_post_scheduling_workflow(self,
                                                scheduling_result: Dict[str, Any],
                                                lead_info: Dict[str, Any],
                                                context: Dict[str, Any]):
        """
        üöÄ WORKFLOW COMPLETO P√ìS-AGENDAMENTO
        Executa todas as a√ß√µes necess√°rias ap√≥s agendar reuni√£o
        """
        try:
            from datetime import datetime, timedelta
            from app.integrations.supabase_client import supabase_client
            
            google_event_id = scheduling_result.get("google_event_id")
            start_time = scheduling_result.get("start_time")
            lead_id = lead_info.get("id")  # Agora estar√° definido pelo CRM
            
            # Se n√£o tiver lead_id, tentar criar no CRM primeiro
            if not lead_id and "crm" in self.services:
                try:
                    crm_result = await self.services["crm"].create_or_update_lead(lead_info)
                    if crm_result.get("success") and crm_result.get("lead_id"):
                        lead_id = crm_result["lead_id"]
                        lead_info["id"] = lead_id
                except Exception as e:
                    emoji_logger.service_warning(f"Erro ao criar lead no CRM: {e}")
            
            emoji_logger.service_event("üéØ Iniciando workflow p√≥s-agendamento")
            
            # 1. CRIAR QUALIFICA√á√ÉO NO SUPABASE
            try:
                # Buscar ou criar lead no Supabase usando UUID
                supabase_lead_id = await self._get_or_create_supabase_lead_id(lead_info)
                
                qualification_data = {
                    'lead_id': supabase_lead_id,  # Usar UUID do Supabase
                    'qualification_status': 'QUALIFIED',
                    'score': 85,
                    'notes': f'Reuni√£o agendada com sucesso. Evento Google: {google_event_id}',
                    'qualified_at': datetime.now().isoformat(),
                    'qualified_by': str(uuid4())  # Usar UUID v√°lido ao inv√©s de 'TeamCoordinator'
                }
                
                await supabase_client.create_lead_qualification(qualification_data)
                emoji_logger.system_success("‚úÖ Qualifica√ß√£o criada no Supabase")
            except Exception as e:
                emoji_logger.service_warning(f"Erro ao criar qualifica√ß√£o: {e}")
            
            # 2. ATUALIZAR LEAD NO SUPABASE  
            try:
                # Usar o UUID do Supabase ao inv√©s do ID do Kommo
                supabase_lead_id = await self._get_or_create_supabase_lead_id(lead_info)
                
                update_data = {
                    'google_event_id': google_event_id,
                    'meeting_scheduled_at': start_time,
                    'qualification_status': 'QUALIFIED',
                    'current_stage': 'MEETING_SCHEDULED'
                }
                
                await supabase_client.update_lead(supabase_lead_id, update_data)
                emoji_logger.system_success("‚úÖ Lead atualizado com dados da reuni√£o")
            except Exception as e:
                emoji_logger.service_warning(f"Erro ao atualizar lead: {e}")
            
            # 3. CRIAR LEMBRETES PERSONALIZADOS
            if "followup" in self.services:
                try:
                    # üõ°Ô∏è VALIDA√á√ÉO: Verificar se start_time √© string ou datetime
                    if isinstance(start_time, str):
                        meeting_datetime = datetime.fromisoformat(start_time)
                    elif isinstance(start_time, datetime):
                        meeting_datetime = start_time
                    else:
                        raise ValueError(f"start_time deve ser string ou datetime, recebido: {type(start_time)}")
                    
                    followup_service = self.services["followup"]
                    
                    # Lembrete 24h antes
                    reminder_24h = await self._generate_personalized_reminder(
                        lead_info,
                        meeting_datetime,
                        24,
                        context
                    )
                    
                    # Usar UUID do Supabase para follow-ups
                    supabase_lead_id = await self._get_or_create_supabase_lead_id(lead_info)
                    
                    await followup_service.create_followup_direct({
                        'lead_id': supabase_lead_id,
                        'type': 'MEETING_REMINDER_24H', 
                        'scheduled_at': (meeting_datetime - timedelta(hours=24)).isoformat(),
                        'message': reminder_24h,
                        'metadata': {
                            'google_event_id': google_event_id,
                            'hours_before': 24
                        }
                    })
                    emoji_logger.system_success("‚úÖ Lembrete 24h criado")
                    
                    # Lembrete 2h antes
                    reminder_2h = await self._generate_personalized_reminder(
                        lead_info,
                        meeting_datetime,
                        2,
                        context
                    )
                    
                    await followup_service.create_followup_direct({
                        'lead_id': supabase_lead_id,
                        'type': 'MEETING_REMINDER_2H',
                        'scheduled_at': (meeting_datetime - timedelta(hours=2)).isoformat(),
                        'message': reminder_2h,
                        'metadata': {
                            'google_event_id': google_event_id,
                            'hours_before': 2
                        }
                    })
                    emoji_logger.system_success("‚úÖ Lembrete 2h criado")
                    
                except Exception as e:
                    emoji_logger.service_warning(f"Erro ao criar lembretes: {e}")
            
            # 4. ATUALIZAR CRM SE DISPON√çVEL
            if "crm" in self.services and lead_info and lead_id:
                try:
                    crm_service = self.services["crm"]
                    
                    # Usar o ID do Kommo (original) para opera√ß√µes do CRM
                    kommo_lead_id = lead_info.get("id") or lead_id
                    if kommo_lead_id:
                        # Atualizar est√°gio no CRM
                        await crm_service.update_lead_stage(
                            str(kommo_lead_id),  # Usar ID do Kommo para CRM
                            "REUNIAO_AGENDADA",
                            f"Reuni√£o agendada para {start_time}"
                        )
                        
                        # Adicionar tags
                        if hasattr(crm_service, 'add_tags_to_lead'):
                            await crm_service.add_tags_to_lead(
                                str(kommo_lead_id),  # Usar ID do Kommo para CRM
                                ["reuniao_agendada", "qualificado", "hot_lead"]
                            )
                    
                    emoji_logger.system_success("‚úÖ CRM atualizado com sucesso")
                except Exception as e:
                    emoji_logger.service_warning(f"Erro ao atualizar CRM: {e}")
            
            emoji_logger.service_event("üéä Workflow p√≥s-agendamento conclu√≠do!")
            
        except Exception as e:
            emoji_logger.service_error(f"Erro no workflow p√≥s-agendamento: {e}")
    
    async def _generate_personalized_reminder(self,
                                             lead_info: Dict[str, Any],
                                             meeting_time: datetime,
                                             hours_before: int,
                                             context: Dict[str, Any]) -> str:
        """
        Gera mensagem personalizada de lembrete
        N√ÉO USA TEMPLATES FIXOS - mensagens √∫nicas baseadas no contexto
        """
        lead_name = lead_info.get("name", "").split()[0] if lead_info.get("name") else ""
        meeting_hour = meeting_time.strftime("%H:%M")
        weekday = ["segunda", "ter√ßa", "quarta", "quinta", "sexta", "s√°bado", "domingo"][meeting_time.weekday()]
        
        # Informa√ß√µes do contexto
        main_interest = context.get("main_interest", "economia na conta de luz")
        pain_points = context.get("pain_points", [])
        
        if hours_before == 24:
            # Lembrete 24h - informativo e amig√°vel
            if "conta alta" in str(pain_points).lower():
                return f"Oi{' ' + lead_name if lead_name else ''}! üòä Amanh√£ √†s {meeting_hour} Leonardo vai te mostrar como reduzir essa conta alta. Preparado(a) pra economizar?"
            else:
                return f"{'Oi ' + lead_name + '! ' if lead_name else ''}Confirmado amanh√£ {weekday} √†s {meeting_hour} com Leonardo sobre {main_interest}! üåû"
        else:
            # Lembrete 2h - direto e urgente
            return f"‚è∞ Reuni√£o em 2h! Leonardo te espera √†s {meeting_hour} pra falar da sua economia!"
    
    async def sync_lead_to_crm(self, lead_info: Dict[str, Any]) -> Dict[str, Any]:
        """
        üöÄ Sincroniza lead imediatamente com Kommo CRM
        Conecta com KommoAutoSyncService para sync din√¢mico
        
        Args:
            lead_info: Informa√ß√µes atualizadas do lead
            
        Returns:
            Resultado da sincroniza√ß√£o
        """
        try:
            # Verificar se sync est√° habilitado
            if not settings.enable_kommo_auto_sync:
                return {"success": False, "message": "Auto sync desabilitado"}
            
            emoji_logger.service_event("üîÑ Iniciando sync imediato com Kommo CRM")
            
            # Usar servi√ßo CRM atual (kommo_auto_sync foi migrado para crm_service)
            from app.services.crm_service_100_real import CRMServiceReal
            kommo_auto_sync_service = CRMServiceReal()  # Compatibilidade com c√≥digo legado
            
            # Primeiro, garantir que o lead existe no Supabase
            supabase_lead_id = await self._get_or_create_supabase_lead_id(lead_info)
            
            # Atualizar Supabase com informa√ß√µes mais recentes
            from app.integrations.supabase_client import supabase_client
            
            # Preparar dados para atualiza√ß√£o
            update_data = {}
            
            # Mapear campos importantes
            if lead_info.get("name"):
                update_data["name"] = lead_info["name"]
            if lead_info.get("email"):
                # üî• CORRE√á√ÉO CR√çTICA: Garantir que email seja salvo no Supabase
                update_data["email"] = lead_info["email"]
                emoji_logger.service_event(f"‚úâÔ∏è Email detectado e ser√° salvo: {lead_info['email']}")
            if lead_info.get("bill_value"):
                update_data["bill_value"] = lead_info["bill_value"]
            if lead_info.get("chosen_flow"):
                update_data["chosen_flow"] = lead_info["chosen_flow"]
            if lead_info.get("current_stage"):
                update_data["current_stage"] = lead_info["current_stage"]
            if lead_info.get("qualification_score"):
                # üî• CORRE√á√ÉO CR√çTICA: Converter float para int para evitar erro de tipo INTEGER
                from app.utils.safe_conversions import safe_int_conversion
                update_data["qualification_score"] = safe_int_conversion(lead_info["qualification_score"], 0)
            if lead_info.get("google_event_link"):
                update_data["google_event_link"] = lead_info["google_event_link"]
            
            # Atualizar no Supabase se houver mudan√ßas
            if update_data:
                try:
                    await supabase_client.update_lead(supabase_lead_id, update_data)
                    emoji_logger.service_event(
                        "‚úÖ Lead atualizado no Supabase",
                        fields=list(update_data.keys()),
                        data=update_data
                    )
                    
                    # üî• Log espec√≠fico para email para debugging
                    if "email" in update_data:
                        emoji_logger.system_success(
                            f"üìß Email salvo com sucesso no Supabase: {update_data['email']}"
                        )
                except Exception as e:
                    emoji_logger.service_error(f"Erro ao atualizar lead no Supabase: {e}")
                    emoji_logger.service_error(f"Dados que falharam: {update_data}")
                    # N√£o propagar erro para n√£o quebrar o fluxo principal
            
            # Executar sync espec√≠fico do lead
            if hasattr(kommo_auto_sync_service, 'sync_specific_lead'):
                sync_result = await kommo_auto_sync_service.sync_specific_lead(supabase_lead_id)
            else:
                # Fallback: for√ßar sync de todos os leads (menos eficiente)
                await kommo_auto_sync_service.sync_new_leads()
                await kommo_auto_sync_service.sync_lead_updates()
                sync_result = {"success": True, "message": "Sync completo executado"}
            
            emoji_logger.system_success(
                "‚úÖ Lead sincronizado com Kommo CRM",
                result=sync_result
            )
            
            return sync_result
            
        except Exception as e:
            emoji_logger.service_error(f"Erro ao sincronizar com CRM: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def health_check(self) -> Dict[str, bool]:
        """Verifica sa√∫de dos servi√ßos"""
        health = {}
        
        for name, service in self.services.items():
            try:
                # Cada servi√ßo deve ter um m√©todo health_check
                if hasattr(service, 'health_check'):
                    health[name] = await service.health_check()
                else:
                    health[name] = True  # Assume healthy se n√£o tem check
            except:
                health[name] = False
        
        return health
    
    async def _get_or_create_supabase_lead_id(self, lead_info: Dict[str, Any]) -> str:
        """
        Busca ou cria um UUID v√°lido no Supabase para o lead
        
        Args:
            lead_info: Informa√ß√µes do lead incluindo telefone e dados do Kommo
            
        Returns:
            UUID v√°lido do Supabase
        """
        try:
            from app.integrations.supabase_client import supabase_client
            
            phone = lead_info.get("phone", "")
            if not phone:
                # Se n√£o tem telefone, gerar n√∫mero √∫nico baseado no UUID
                new_lead_uuid = str(uuid4())
                # Usar parte do UUID como telefone √∫nico para evitar duplica√ß√£o
                unique_phone = f"unknown_{new_lead_uuid[:8]}"
                
                lead_data = {
                    "id": new_lead_uuid,  # UUID expl√≠cito
                    "phone_number": unique_phone,  # Phone √∫nico baseado no UUID
                    "name": lead_info.get("name", "Lead Sem Telefone"),
                    "email": lead_info.get("email"),
                    "bill_value": lead_info.get("bill_value"),
                    "current_stage": "INITIAL_CONTACT", 
                    "qualification_status": "PENDING",
                    "kommo_lead_id": str(lead_info.get("id")) if lead_info.get("id") else None
                }
                
                try:
                    new_lead = await supabase_client.create_lead(lead_data)
                    emoji_logger.system_success(f"‚úÖ Lead sem telefone criado: {new_lead['id']}")
                    return new_lead["id"]
                except Exception as e:
                    emoji_logger.service_error(f"Erro ao criar lead sem telefone: {e}")
                    # Se erro for duplicate key, retornar UUID sem criar no banco
                    if "duplicate key" in str(e):
                        return new_lead_uuid
                    return new_lead_uuid  # Fallback para UUID
            
            # Buscar lead existente no Supabase por telefone
            existing_lead = await supabase_client.get_lead_by_phone(phone)
            
            if existing_lead:
                # Atualizar dados do Kommo se necess√°rio
                kommo_id = lead_info.get("id")
                if kommo_id and existing_lead.get("kommo_lead_id") != str(kommo_id):
                    await supabase_client.update_lead(
                        existing_lead["id"],
                        {"kommo_lead_id": str(kommo_id)}
                    )
                return existing_lead["id"]
            else:
                # üî• CORRE√á√ÉO CR√çTICA: Criar novo lead no Supabase
                emoji_logger.service_event(f"üÜï Criando novo lead no Supabase para {phone}")
                lead_data = {
                    "phone_number": phone,
                    "name": lead_info.get("name"),
                    "email": lead_info.get("email"),
                    "bill_value": lead_info.get("bill_value"),
                    "current_stage": "INITIAL_CONTACT",
                    "qualification_status": "PENDING",
                    "kommo_lead_id": str(lead_info.get("id")) if lead_info.get("id") else None
                }
                
                try:
                    new_lead = await supabase_client.create_lead(lead_data)
                    emoji_logger.system_success(f"‚úÖ Lead criado no Supabase: {new_lead['id']}")
                    return new_lead["id"]
                except Exception as e:
                    emoji_logger.service_error(f"Erro ao criar lead no Supabase: {e}")
                    # Fallback: criar UUID mas registrar erro
                    return str(uuid4())
                
        except Exception as e:
            emoji_logger.service_error(f"Erro ao obter UUID do Supabase: {e}")
            # Fallback: criar novo UUID
            return str(uuid4())