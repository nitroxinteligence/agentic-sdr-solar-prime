"""
Lead Manager - Gerenciamento SIMPLES de leads
ZERO complexidade, funcionalidade total
"""

from typing import Dict, Any, Optional, List
import re
from datetime import datetime
from app.utils.logger import emoji_logger
from app.config import settings

class LeadManager:
    """
    Gerenciador SIMPLES de leads e qualifica√ß√£o
    Mant√©m toda a l√≥gica de extra√ß√£o e scoring
    """
    
    def __init__(self):
        self.is_initialized = False
        self.scoring_enabled = settings.enable_lead_scoring
        
    def initialize(self):
        """Inicializa√ß√£o simples"""
        if self.is_initialized:
            return
            
        emoji_logger.system_ready("üìä LeadManager inicializado")
        self.is_initialized = True
    
    def extract_lead_info(self, messages: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Extrai informa√ß√µes do lead de forma SIMPLES
        
        Args:
            messages: Hist√≥rico de mensagens
            
        Returns:
            Informa√ß√µes extra√≠das do lead
        """
        lead_info = {
            "name": None,
            "phone": None,
            "email": None,
            "bill_value": None,
            "location": None,
            "property_type": None,
            "has_bill_image": False,
            "interests": [],
            "objections": [],
            "qualification_score": 0,
            "stage": "novo",
            "chosen_flow": None  # üî• CORRE√á√ÉO: Campo para detectar sele√ß√£o de fluxo
        }
        
        # Processar cada mensagem
        for idx, msg in enumerate(messages):
            content = msg.get("content", "").lower()
            role = msg.get("role", "")
            
            # Extrair nome com detec√ß√£o contextual melhorada
            if not lead_info["name"] and role == "user":
                # Verificar se a mensagem anterior perguntou o nome
                if idx > 0:
                    prev_msg = messages[idx - 1]
                    prev_content = prev_msg.get("content", "").lower()
                    # Expandir detec√ß√£o para mais varia√ß√µes de perguntas sobre nome
                    if prev_msg.get("role") == "assistant" and any(phrase in prev_content for phrase in [
                        "como posso te chamar",
                        "como posso chamar",
                        "qual seu nome",
                        "qual √© seu nome",
                        "me diga seu nome",
                        "pode me dizer seu nome"
                    ]):
                        # A resposta atual provavelmente √© um nome
                        potential_name = msg.get("content", "").strip()
                        words = potential_name.split()
                        
                        # Aceitar respostas de 1-4 palavras como poss√≠vel nome
                        if 1 <= len(words) <= 4:
                            # Lista expandida de palavras que N√ÉO s√£o nomes
                            blacklist = [
                                "oi", "ol√°", "ola", "sim", "n√£o", "nao", "ok", "tudo",
                                "bom", "dia", "tarde", "noite", "boa", "legal", "bem",
                                "quero", "gostaria", "preciso", "pode", "poderia"
                            ]
                            
                            # Se n√£o tem palavras da blacklist, aceitar como nome
                            if not any(word.lower() in blacklist for word in words):
                                lead_info["name"] = potential_name.title()
                                emoji_logger.conversation_event(f"üéØ Nome detectado no contexto: {lead_info['name']}")
                                continue
                
                # Tentar padr√µes tradicionais
                name = self._extract_name(content)
                if name:
                    lead_info["name"] = name
            
            # Extrair email
            if not lead_info["email"]:
                email = self._extract_email(content)
                if email:
                    lead_info["email"] = email
            
            # Extrair valor da conta
            if not lead_info["bill_value"]:
                value = self._extract_bill_value(content)
                if value:
                    lead_info["bill_value"] = value
            
            # Detectar tipo de im√≥vel
            if not lead_info["property_type"]:
                prop_type = self._extract_property_type(content)
                if prop_type:
                    lead_info["property_type"] = prop_type
            
            # Detectar localiza√ß√£o
            if not lead_info["location"]:
                location = self._extract_location(content)
                if location:
                    lead_info["location"] = location
            
            # Detectar interesses
            interests = self._extract_interests(content)
            lead_info["interests"].extend(interests)
            
            # Detectar obje√ß√µes
            objections = self._extract_objections(content)
            lead_info["objections"].extend(objections)
            
            # üî• CORRE√á√ÉO CR√çTICA: Detectar sele√ß√£o de fluxo
            if not lead_info.get("chosen_flow"):
                chosen_flow = self._extract_chosen_flow(content)
                if chosen_flow:
                    lead_info["chosen_flow"] = chosen_flow
        
        # Remover duplicatas
        lead_info["interests"] = list(set(lead_info["interests"]))
        lead_info["objections"] = list(set(lead_info["objections"]))
        
        # Calcular score de qualifica√ß√£o
        if self.scoring_enabled:
            lead_info["qualification_score"] = self.calculate_qualification_score(lead_info)
            lead_info["stage"] = self.determine_stage(lead_info)
        
        return lead_info
    
    def calculate_qualification_score(self, lead_info: Dict[str, Any]) -> float:
        """
        Calcula score de qualifica√ß√£o SIMPLES
        
        Args:
            lead_info: Informa√ß√µes do lead
            
        Returns:
            Score de 0 a 100
        """
        score = 0.0
        
        # Valor da conta (peso 40%)
        bill_value = lead_info.get("bill_value", 0)
        if bill_value:
            if bill_value >= 1000:
                score += 40
            elif bill_value >= 700:
                score += 30
            elif bill_value >= 500:
                score += 20
            elif bill_value >= 300:
                score += 10
        
        # Informa√ß√µes fornecidas (peso 30%)
        if lead_info.get("name"):
            score += 10
        if lead_info.get("phone"):
            score += 10
        if lead_info.get("email"):
            score += 5
        if lead_info.get("location"):
            score += 5
        
        # Tipo de im√≥vel (peso 15%)
        property_type = lead_info.get("property_type") or ""  # Garante que nunca √© None
        if "comercial" in property_type or "empresa" in property_type:
            score += 15
        elif "residencial" in property_type or "casa" in property_type:
            score += 10
        
        # Interesses demonstrados (peso 10%)
        interests = lead_info.get("interests", [])
        if len(interests) >= 3:
            score += 10
        elif len(interests) >= 2:
            score += 7
        elif len(interests) >= 1:
            score += 5
        
        # Obje√ß√µes (peso -5%)
        objections = lead_info.get("objections", [])
        if len(objections) >= 3:
            score -= 5
        elif len(objections) >= 2:
            score -= 3
        
        # Garantir score entre 0 e 100
        return max(0, min(100, score))
    
    def determine_stage(self, lead_info: Dict[str, Any]) -> str:
        """
        Determina est√°gio do lead no funil
        
        Args:
            lead_info: Informa√ß√µes do lead
            
        Returns:
            Est√°gio do lead
        """
        score = lead_info.get("qualification_score", 0)
        
        if score >= 80:
            return "quente"
        elif score >= 60:
            return "morno"
        elif score >= 40:
            return "qualificando"
        elif score >= 20:
            return "interesse"
        else:
            return "novo"
    
    def _extract_name(self, text: str) -> Optional[str]:
        """Extrai nome do texto com filtros mais rigorosos"""
        
        # üî• CORRE√á√ÉO CR√çTICA: Lista de palavras/frases que N√ÉO s√£o nomes
        blacklist_phrases = [
            "an√∫ncio", "anuncio", "energia solar", "solar", "energia",
            "propaganda", "publicidade", "oferta", "promo√ß√£o", "desconto",
            "conta de luz", "conta", "luz", "eletricidade", "kwh",
            "instala√ß√£o", "sistema", "painel", "placa", "telhado",
            "economia", "economizar", "reduzir", "diminuir",
            "whatsapp", "mensagem", "conversa", "chat", "texto",
            "oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite",
            "quero", "gostaria", "preciso", "queria", "desejo", "interesse"
        ]
        
        patterns = [
            # Padr√µes expl√≠citos de apresenta√ß√£o (mais confi√°veis)
            r"meu nome [e√©] ([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+){0,2})(?:[,\.\!]|$)",
            r"me chamo ([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+){0,2})(?:[,\.\!]|$)",
            r"sou o ([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+){0,2})(?:[,\.\!]|$)",
            r"sou a ([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+){0,2})(?:[,\.\!]|$)",
            r"eu sou ([A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+){0,2})(?:[,\.\!]|$)",
            r"(?:^|\s)([A-Z][a-z√Ä-√ø]+\s+[A-Z][a-z√Ä-√ø]+)(?:\s|$)"  # Nomes pr√≥prios capitalizados (mais restrito)
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                name = match.group(1).strip().title()
                
                # Valida√ß√µes rigorosas
                if len(name) < 3 or len(name) > 50:  # Nome muito curto ou muito longo
                    continue
                
                # üî• FILTRO PRINCIPAL: Verificar se o nome cont√©m palavras da blacklist
                name_lower = name.lower()
                is_blacklisted = any(phrase in name_lower for phrase in blacklist_phrases)
                
                if is_blacklisted:
                    continue  # Pular nomes que cont√©m palavras proibidas
                
                # Limitar a nomes razo√°veis (m√°ximo 3 palavras)
                words = name.split()
                if len(words) > 3:
                    continue
                
                # Verificar se as palavras s√£o apenas letras (sem n√∫meros ou s√≠mbolos estranhos)
                if all(word.isalpha() or any(c in "√†√°√¢√£√§√•√®√©√™√´√¨√≠√Æ√Ø√≤√≥√¥√µ√∂√π√∫√ª√º√Ω√ø√ß√±" for c in word.lower()) for word in words):
                    # Verificar tamanho m√≠nimo por palavra
                    if all(len(word) >= 2 for word in words):
                        return name
        
        return None
    
    def _extract_email(self, text: str) -> Optional[str]:
        """Extrai email do texto"""
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        match = re.search(email_pattern, text)
        if match:
            return match.group(0).lower()
        return None
    
    def _extract_bill_value(self, text: str) -> Optional[float]:
        """Extrai valor da conta do texto"""
        patterns = [
            r"conta.{0,20}R?\$?\s*(\d+(?:[.,]\d{0,2})?)",
            r"pago.{0,20}R?\$?\s*(\d+(?:[.,]\d{0,2})?)",
            r"valor.{0,20}R?\$?\s*(\d+(?:[.,]\d{0,2})?)",
            r"(\d+(?:[.,]\d{0,2})?)\s*reais",  # üî• FIX: Detectar "450 reais"
            r"uns\s*(\d+(?:[.,]\d{0,2})?)",     # üî• FIX: Detectar "uns 450"
            r"R?\$?\s*(\d+(?:[.,]\d{0,2})?)"
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                try:
                    # Pegar o maior valor encontrado
                    values = [float(m.replace(",", ".")) for m in matches]
                    # Filtrar valores razo√°veis para conta de luz
                    reasonable_values = [v for v in values if 50 <= v <= 10000]
                    if reasonable_values:
                        return max(reasonable_values)
                except:
                    pass
        
        return None
    
    def _extract_property_type(self, text: str) -> Optional[str]:
        """Extrai tipo de im√≥vel"""
        # üî• FIX: Usar valores exatos aceitos pelo banco de dados
        types = {
            "casa": ["casa", "resid√™ncia", "moradia"],
            "apartamento": ["apartamento", "apto", "ap"],
            "comercial": ["empresa", "com√©rcio", "loja", "escrit√≥rio", "comercial"],
            "rural": ["fazenda", "s√≠tio", "ch√°cara", "rural"]
        }
        
        for prop_type, keywords in types.items():
            if any(keyword in text for keyword in keywords):
                return prop_type
        
        return None
    
    def _extract_location(self, text: str) -> Optional[str]:
        """Extrai localiza√ß√£o"""
        # Padr√µes de cidades/estados brasileiros
        patterns = [
            r"moro em ([A-Za-z\s]+)",
            r"sou de ([A-Za-z\s]+)",
            r"estou em ([A-Za-z\s]+)",
            r"cidade de ([A-Za-z\s]+)"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(1).strip().title()
        
        return None
    
    def _extract_interests(self, text: str) -> List[str]:
        """Extrai interesses demonstrados"""
        interests = []
        
        interest_keywords = {
            "economia": ["economizar", "economia", "reduzir conta", "conta menor"],
            "sustentabilidade": ["sustent√°vel", "meio ambiente", "verde", "ecol√≥gico"],
            "investimento": ["investimento", "retorno", "valoriza√ß√£o", "investir"],
            "independ√™ncia": ["independ√™ncia", "pr√≥pria energia", "autossuficiente"],
            "tecnologia": ["tecnologia", "inova√ß√£o", "moderno", "smart"]
        }
        
        for interest, keywords in interest_keywords.items():
            if any(keyword in text for keyword in keywords):
                interests.append(interest)
        
        return interests
    
    def _extract_objections(self, text: str) -> List[str]:
        """Extrai obje√ß√µes mencionadas"""
        objections = []
        
        objection_keywords = {
            "pre√ßo": ["caro", "muito dinheiro", "n√£o tenho", "sem condi√ß√µes"],
            "desconfian√ßa": ["golpe", "engana√ß√£o", "n√£o confio", "suspeito"],
            "tempo": ["n√£o √© hora", "depois", "mais tarde", "futuro"],
            "propriedade": ["aluguel", "n√£o √© meu", "alugado", "inquilino"],
            "d√∫vidas": ["n√£o entendo", "complicado", "dif√≠cil", "n√£o sei"]
        }
        
        for objection, keywords in objection_keywords.items():
            if any(keyword in text for keyword in keywords):
                objections.append(objection)
        
        return objections
    
    def _extract_chosen_flow(self, text: str) -> Optional[str]:
        """
        Extrai escolha de fluxo do usu√°rio
        üî• CORRE√á√ÉO: Detectar quando usu√°rio seleciona op√ß√£o (ex: "op√ß√£o 1", "instala√ß√£o pr√≥pria")
        """
        text_lower = text.lower().strip()
        
        # Mapear os fluxos exatos do Kommo
        flow_mapping = {
            # Op√ß√µes num√©ricas
            "op√ß√£o 1": "Instala√ß√£o Usina Pr√≥pria",
            "opcao 1": "Instala√ß√£o Usina Pr√≥pria",
            "1": "Instala√ß√£o Usina Pr√≥pria",
            "instala√ß√£o pr√≥pria": "Instala√ß√£o Usina Pr√≥pria",
            "instalacao propria": "Instala√ß√£o Usina Pr√≥pria",
            "usina pr√≥pria": "Instala√ß√£o Usina Pr√≥pria",
            
            "op√ß√£o 2": "Aluguel de Lote",
            "opcao 2": "Aluguel de Lote",
            "2": "Aluguel de Lote",
            "aluguel": "Aluguel de Lote",
            "lote": "Aluguel de Lote",
            
            "op√ß√£o 3": "Compra com Desconto",
            "opcao 3": "Compra com Desconto", 
            "3": "Compra com Desconto",
            "desconto": "Compra com Desconto",
            "compra": "Compra com Desconto",
            
            "op√ß√£o 4": "Usina Investimento",
            "opcao 4": "Usina Investimento",
            "4": "Usina Investimento",
            "investimento": "Usina Investimento",
            "usina investimento": "Usina Investimento"
        }
        
        # Padr√µes espec√≠ficos para detectar escolha de fluxo
        flow_patterns = [
            r"quero\s+(?:a\s+)?op√ß[√£a]o\s*(\d+)",
            r"escolho\s+(?:a\s+)?op√ß[√£a]o\s*(\d+)",
            r"op√ß[√£a]o\s*(\d+)",
            r"quero\s+(?:a\s+)?(\d+)",
            r"escolho\s+(?:a\s+)?(\d+)"
        ]
        
        # Primeiro tentar padr√µes espec√≠ficos de op√ß√µes
        for pattern in flow_patterns:
            match = re.search(pattern, text_lower)
            if match:
                option_num = match.group(1)
                if option_num in ["1", "2", "3", "4"]:
                    # Mapear n√∫mero para fluxo correto
                    if option_num == "1":
                        return "Instala√ß√£o Usina Pr√≥pria"
                    elif option_num == "2":
                        return "Aluguel de Lote"
                    elif option_num == "3":
                        return "Compra com Desconto"
                    elif option_num == "4":
                        return "Usina Investimento"
        
        # Depois verificar palavras-chave espec√≠ficas
        for key, flow in flow_mapping.items():
            if key in text_lower:
                # Evitar falsos positivos com n√∫meros soltos
                # S√≥ aceitar n√∫meros isolados se vierem com contexto de escolha
                if key.isdigit():
                    # Verificar se √© uma escolha expl√≠cita
                    choice_context = ["quero", "escolho", "op√ß√£o", "opcao", "n√∫mero", "numero"]
                    if not any(ctx in text_lower for ctx in choice_context):
                        continue  # Ignorar n√∫meros sem contexto de escolha
                
                # Evitar pegar valores monet√°rios
                if key.isdigit() and ("r$" in text_lower or "reais" in text_lower or "conta" in text_lower):
                    continue
                    
                return flow
        
        # N√£o retornar nada se n√£o for uma escolha clara de fluxo
        return None
    
    def format_lead_summary(self, lead_info: Dict[str, Any]) -> str:
        """
        Formata resumo do lead para exibi√ß√£o
        
        Args:
            lead_info: Informa√ß√µes do lead
            
        Returns:
            Resumo formatado
        """
        summary = "üìä **Resumo do Lead**\n\n"
        
        if lead_info.get("name"):
            summary += f"üë§ Nome: {lead_info['name']}\n"
        
        if lead_info.get("phone"):
            summary += f"üì± Telefone: {lead_info['phone']}\n"
        
        if lead_info.get("email"):
            summary += f"üìß Email: {lead_info['email']}\n"
        
        if lead_info.get("location"):
            summary += f"üìç Localiza√ß√£o: {lead_info['location']}\n"
        
        if lead_info.get("bill_value"):
            summary += f"üí∞ Valor da conta: R$ {lead_info['bill_value']:.2f}\n"
        
        if lead_info.get("property_type"):
            summary += f"üè† Tipo de im√≥vel: {lead_info['property_type']}\n"
        
        if lead_info.get("interests"):
            summary += f"‚ú® Interesses: {', '.join(lead_info['interests'])}\n"
        
        if lead_info.get("objections"):
            summary += f"‚ö†Ô∏è Obje√ß√µes: {', '.join(lead_info['objections'])}\n"
        
        if lead_info.get("chosen_flow"):
            summary += f"üéØ Fluxo escolhido: {lead_info['chosen_flow']}\n"
        
        if self.scoring_enabled:
            summary += f"\nüéØ Score: {lead_info['qualification_score']:.0f}/100\n"
            summary += f"üìà Est√°gio: {lead_info['stage'].upper()}\n"
        
        return summary