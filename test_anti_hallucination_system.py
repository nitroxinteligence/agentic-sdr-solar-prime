#!/usr/bin/env python3
"""
Teste completo do sistema anti-alucina√ß√£o para Google Calendar
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
import re

async def test_anti_hallucination():
    """Testa o sistema anti-alucina√ß√£o completo"""
    
    print("=" * 70)
    print("TESTE: Sistema Anti-Alucina√ß√£o para Google Calendar")
    print("=" * 70)
    
    from app.agents.agentic_sdr_stateless import AgenticSDRStateless
    from pathlib import Path
    
    # Mock do team_coordinator
    mock_coordinator = MagicMock()
    mock_model_manager = AsyncMock()
    
    # Criar agente
    agent = AgenticSDRStateless()
    agent.team_coordinator = mock_coordinator
    agent.model_manager = mock_model_manager
    
    # Simular service_results do Calendar
    service_results = [
        {
            "service": "calendar",
            "success": True,
            "data": {
                "message": "Tenho estes hor√°rios dispon√≠veis amanh√£: 09:00, 10:00, 11:00. Qual prefere?"
            },
            "result": "Tenho estes hor√°rios dispon√≠veis amanh√£: 09:00, 10:00, 11:00. Qual prefere?"
        }
    ]
    
    # Lead info
    lead_info = {
        "name": "Mateus",
        "phone": "5511999999999"
    }
    
    # Contexto
    context = {
        "conversation_stage": "agendamento"
    }
    
    print("\nüìù Teste 1: Verificar formata√ß√£o de service_results no prompt")
    print("-" * 50)
    
    prompt = agent._build_prompt_with_history(
        "eu quero agendar uma reuni√£o pra amanh√£",
        context,
        lead_info,
        service_results,
        "",
        [],
        {}
    )
    
    # Verificar se service_results est√£o no prompt
    tests_passed = 0
    tests_total = 0
    
    # Teste 1: Service results inclu√≠dos
    tests_total += 1
    if "RESULTADOS DE SERVI√áOS EXECUTADOS" in prompt:
        print("‚úÖ Service results inclu√≠dos no prompt")
        tests_passed += 1
    else:
        print("‚ùå Service results N√ÉO inclu√≠dos no prompt")
    
    # Teste 2: Se√ß√£o de resultados formatada
    tests_total += 1
    if "üö® === RESULTADOS DE SERVI√áOS EXECUTADOS === üö®" in prompt:
        print("‚úÖ Se√ß√£o de resultados formatada corretamente")
        tests_passed += 1
    else:
        print("‚ùå Se√ß√£o de resultados mal formatada")
    
    # Teste 3: Instru√ß√£o para usar resultados
    tests_total += 1
    if "VOC√ä DEVE usar estes resultados" in prompt:
        print("‚úÖ Instru√ß√£o para usar resultados presente")
        tests_passed += 1
    else:
        print("‚ùå Instru√ß√£o para usar resultados ausente")
    
    # Teste 4: Calendar funcionou
    tests_total += 1
    if "CALENDAR EXECUTADO COM SUCESSO" in prompt:
        print("‚úÖ Calendar marcado como sucesso")
        tests_passed += 1
    else:
        print("‚ùå Calendar n√£o marcado como sucesso")
    
    # Teste 5: Mensagem do Calendar
    tests_total += 1
    if "09:00, 10:00, 11:00" in prompt:
        print("‚úÖ Hor√°rios do Calendar presentes")
        tests_passed += 1
    else:
        print("‚ùå Hor√°rios do Calendar ausentes")
    
    print("\nüìù Teste 2: Verificar detec√ß√£o de alucina√ß√£o")
    print("-" * 50)
    
    # Simular resposta alucinada
    hallucinated_response = """
    <RESPOSTA_FINAL>
    Vixe, Mateus! Desculpa, mas estou tendo alguns probleminhas t√©cnicos aqui pra acessar a agenda do Leonardo.
    </RESPOSTA_FINAL>
    """
    
    # Teste 6: Detectar termos de alucina√ß√£o
    tests_total += 1
    hallucination_terms = [
        "problemas t√©cnicos", "probleminhas t√©cnicos",
        "erro", "n√£o consegui", "n√£o consigo",
        "desculpa", "desculpe", "vixe"
    ]
    
    response_lower = hallucinated_response.lower()
    has_hallucination = any(term in response_lower for term in hallucination_terms)
    
    if has_hallucination:
        print("‚úÖ Alucina√ß√£o detectada corretamente")
        tests_passed += 1
    else:
        print("‚ùå Alucina√ß√£o n√£o detectada")
    
    # Teste 7: Calendar result encontrado
    tests_total += 1
    calendar_result = next((r for r in service_results if r.get("service") == "calendar" and r.get("success")), None)
    if calendar_result:
        print("‚úÖ Calendar result encontrado")
        tests_passed += 1
    else:
        print("‚ùå Calendar result n√£o encontrado")
    
    # Teste 8: Extra√ß√£o de mensagem
    tests_total += 1
    calendar_data = calendar_result.get("data", {})
    calendar_message = calendar_data.get("message", "")
    if not calendar_message and calendar_result.get("result"):
        calendar_message = calendar_result.get("result")
    
    if "09:00, 10:00, 11:00" in calendar_message:
        print("‚úÖ Mensagem do Calendar extra√≠da corretamente")
        tests_passed += 1
    else:
        print("‚ùå Mensagem do Calendar n√£o extra√≠da")
    
    # Teste 9: Sistema detectaria alucina√ß√£o
    tests_total += 1
    if calendar_result and has_hallucination:
        print("‚úÖ Sistema detectaria e corrigiria alucina√ß√£o")
        tests_passed += 1
    else:
        print("‚ùå Sistema n√£o detectaria alucina√ß√£o")
    
    print("\nüìù Teste 3: Verificar regras no prompt")
    print("-" * 50)
    
    # Ler prompt
    prompt_path = Path("app/prompts/prompt-agente.md")
    if prompt_path.exists():
        prompt_content = prompt_path.read_text(encoding='utf-8')
        
        # Teste 10: Regra SERVICE_RESULTS_PRIORITY
        tests_total += 1
        if "SERVICE_RESULTS_PRIORITY" in prompt_content:
            print("‚úÖ Regra SERVICE_RESULTS_PRIORITY presente")
            tests_passed += 1
        else:
            print("‚ùå Regra SERVICE_RESULTS_PRIORITY ausente")
        
        # Teste 11: Palavras proibidas
        tests_total += 1
        if "PALAVRAS PROIBIDAS quando servi√ßos funcionaram" in prompt_content:
            print("‚úÖ Lista de palavras proibidas presente")
            tests_passed += 1
        else:
            print("‚ùå Lista de palavras proibidas ausente")
        
        # Teste 12: Regras inviol√°veis
        tests_total += 1
        if "REGRAS INVIOL√ÅVEIS" in prompt_content:
            print("‚úÖ Regras inviol√°veis definidas")
            tests_passed += 1
        else:
            print("‚ùå Regras inviol√°veis n√£o definidas")
    
    print("\nüìù Teste 4: Validar prompt de corre√ß√£o")
    print("-" * 50)
    
    # Teste 13: Contexto de agendamento
    tests_total += 1
    if context.get("conversation_stage") == "agendamento":
        print("‚úÖ Contexto de agendamento identificado")
        tests_passed += 1
    else:
        print("‚ùå Contexto de agendamento n√£o identificado")
    
    # Teste 14: Nome do lead
    tests_total += 1
    if lead_info.get("name") == "Mateus":
        print("‚úÖ Nome do lead presente")
        tests_passed += 1
    else:
        print("‚ùå Nome do lead ausente")
    
    # Teste 15: Mensagem original
    tests_total += 1
    message = "eu quero agendar uma reuni√£o pra amanh√£"
    if message:
        print("‚úÖ Mensagem original capturada")
        tests_passed += 1
    else:
        print("‚ùå Mensagem original n√£o capturada")
    
    # Teste 16: Resultado do Calendar
    tests_total += 1
    if calendar_message and "09:00" in calendar_message:
        print("‚úÖ Resultado do Calendar formatado")
        tests_passed += 1
    else:
        print("‚ùå Resultado do Calendar n√£o formatado")
    
    # Resultado final
    print("\n" + "=" * 70)
    print(f"RESULTADO: {tests_passed}/{tests_total} testes passaram ({tests_passed*100/tests_total:.1f}%)")
    
    if tests_passed == tests_total:
        print("üéâ SUCESSO TOTAL: Sistema anti-alucina√ß√£o 100% funcional!")
    elif tests_passed >= tests_total * 0.8:
        print("‚úÖ BOM: Sistema anti-alucina√ß√£o funcionando adequadamente")
    else:
        print("‚ö†Ô∏è ATEN√á√ÉO: Sistema anti-alucina√ß√£o precisa de ajustes")
    
    print("=" * 70)
    
    return tests_passed == tests_total

if __name__ == "__main__":
    result = asyncio.run(test_anti_hallucination())
    exit(0 if result else 1)