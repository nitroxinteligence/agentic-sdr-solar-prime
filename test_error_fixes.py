#!/usr/bin/env python3
"""
Teste das corre√ß√µes de erros identificados nos logs
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.utils.logger import EmojiLogger
from app.api.webhooks import process_contacts_update

def test_emoji_logger_methods():
    """Testa se todos os m√©todos do EmojiLogger est√£o funcionando"""
    print("\n=== TESTE EMOJI LOGGER ===")
    
    # Testa m√©todo que estava causando erro
    try:
        EmojiLogger.conversation_event("Teste de conversa√ß√£o")
        print("‚úÖ conversation_event funcionando")
    except AttributeError as e:
        print(f"‚ùå Erro em conversation_event: {e}")
        return False
    
    # Testa outros m√©todos importantes
    try:
        EmojiLogger.system_warning("Teste de warning")
        EmojiLogger.system_debug("Teste de debug")
        EmojiLogger.system_success("Teste de sucesso")
        print("‚úÖ M√©todos b√°sicos funcionando")
    except Exception as e:
        print(f"‚ùå Erro nos m√©todos b√°sicos: {e}")
        return False
    
    return True

async def test_contacts_update_processing():
    """Testa o processamento de CONTACTS_UPDATE com diferentes cen√°rios"""
    print("\n=== TESTE CONTACTS_UPDATE ===")
    
    # Cen√°rio 1: Dados v√°lidos
    valid_data = {
        'data': {
            'id': '558182986181@c.us',
            'pushName': 'Mateus M'
        }
    }
    
    # Cen√°rio 2: Telefone vazio (deve gerar warning espec√≠fico)
    empty_phone_data = {
        'data': {
            'id': '',
            'pushName': 'Mateus M'
        }
    }
    
    # Cen√°rio 3: pushName vazio (deve gerar warning espec√≠fico)
    empty_pushname_data = {
        'data': {
            'id': '558182986181@c.us',
            'pushName': ''
        }
    }
    
    # Cen√°rio 4: Ambos vazios
    both_empty_data = {
        'data': {
            'id': '',
            'pushName': ''
        }
    }
    
    test_cases = [
        ("Dados v√°lidos", valid_data),
        ("Telefone vazio", empty_phone_data),
        ("PushName vazio", empty_pushname_data),
        ("Ambos vazios", both_empty_data)
    ]
    
    for test_name, test_data in test_cases:
        print(f"\n--- Testando: {test_name} ---")
        try:
            await process_contacts_update(test_data)
            print(f"‚úÖ {test_name} processado sem erro")
        except Exception as e:
            print(f"‚ùå Erro em {test_name}: {e}")
            return False
    
    return True

async def main():
    """Executa todos os testes"""
    print("üß™ INICIANDO TESTES DE CORRE√á√ÉO DE ERROS")
    
    # Teste 1: EmojiLogger
    emoji_test = test_emoji_logger_methods()
    
    # Teste 2: CONTACTS_UPDATE
    contacts_test = await test_contacts_update_processing()
    
    # Resultado final
    print("\n" + "="*50)
    if emoji_test and contacts_test:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Corre√ß√£o do EmojiLogger: OK")
        print("‚úÖ Melhoria do CONTACTS_UPDATE: OK")
        return True
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        if not emoji_test:
            print("‚ùå Problema no EmojiLogger")
        if not contacts_test:
            print("‚ùå Problema no CONTACTS_UPDATE")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)