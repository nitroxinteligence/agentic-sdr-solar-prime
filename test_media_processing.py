#!/usr/bin/env python3
"""
Teste para verificar se o processamento de m√≠dia est√° funcionando ap√≥s as corre√ß√µes do EmojiLogger.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.integrations.evolution import EvolutionAPIClient
from app.api.webhooks import _handle_media_message
from app.utils.logger import emoji_logger

def test_evolution_media_methods():
    """Testa se os m√©todos de m√≠dia do Evolution est√£o dispon√≠veis"""
    print("üîç Testando m√©todos de m√≠dia do Evolution...")
    
    # Verifica se os m√©todos existem
    client = EvolutionAPIClient()
    
    # Testa se get_media_as_base64 existe e tem o decorador retry
    if hasattr(client, 'get_media_as_base64'):
        print("‚úÖ get_media_as_base64 encontrado")
        # Verifica se tem o decorador retry
        if hasattr(client.get_media_as_base64, '__wrapped__'):
            print("‚úÖ get_media_as_base64 tem decorador retry")
        else:
            print("‚ö†Ô∏è get_media_as_base64 pode n√£o ter decorador retry")
    else:
        print("‚ùå get_media_as_base64 N√ÉO encontrado")
    
    # Testa se download_media existe
    if hasattr(client, 'download_media'):
        print("‚úÖ download_media encontrado")
    else:
        print("‚ùå download_media N√ÉO encontrado")
    
    print()

def test_webhook_media_handler():
    """Testa se o handler de m√≠dia do webhook est√° funcionando"""
    print("üîç Testando handler de m√≠dia do webhook...")
    
    try:
        # Verifica se a fun√ß√£o existe
        if callable(_handle_media_message):
            print("‚úÖ _handle_media_message encontrado e √© callable")
        else:
            print("‚ùå _handle_media_message N√ÉO √© callable")
    except Exception as e:
        print(f"‚ùå Erro ao verificar _handle_media_message: {e}")
    
    print()

def test_emoji_logger_calls():
    """Testa se as chamadas do EmojiLogger est√£o funcionando"""
    print("üîç Testando chamadas do EmojiLogger...")
    
    try:
        # Testa chamadas corretas
        emoji_logger.system_info("Teste de chamada correta")
        print("‚úÖ emoji_logger.system_info funcionando")
        
        emoji_logger.system_error("TestComponent", "Teste de erro")
        print("‚úÖ emoji_logger.system_error funcionando")
        
        emoji_logger.system_success("Teste de sucesso")
        print("‚úÖ emoji_logger.system_success funcionando")
        
    except Exception as e:
        print(f"‚ùå Erro nas chamadas do EmojiLogger: {e}")
    
    print()

if __name__ == "__main__":
    print("üöÄ Iniciando testes de processamento de m√≠dia...\n")
    
    test_evolution_media_methods()
    test_webhook_media_handler()
    test_emoji_logger_calls()
    
    print("‚úÖ Testes conclu√≠dos!")