#!/usr/bin/env python3
"""
Teste completo do sistema de agendamento
Valida parsing de dias da semana, bloqueio de finais de semana e fluxo completo
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import asyncio
from datetime import datetime, timedelta

async def test_scheduling_complete():
    """Testa o fluxo completo de agendamento com dias da semana"""
    
    print("=" * 70)
    print("TESTE COMPLETO: Sistema de Agendamento com Dias da Semana")
    print("=" * 70)
    
    from app.core.team_coordinator import TeamCoordinator
    from app.services.calendar_service_100_real import CalendarServiceReal
    
    coordinator = TeamCoordinator()
    await coordinator.initialize()
    
    calendar = CalendarServiceReal()
    await calendar.initialize()
    
    tests_passed = 0
    tests_total = 0
    
    # Teste 1: Agendamento em dia √∫til (segunda-feira)
    print("\nüìù Teste 1: Agendar em segunda-feira (dia √∫til)")
    print("-" * 50)
    tests_total += 1
    
    # Extrair data para segunda-feira
    datetime_info = coordinator._extract_datetime("segunda-feira as 10h")
    
    if datetime_info:
        print(f"   Data extra√≠da: {datetime_info['date']} {datetime_info['time']}")
        
        # Tentar agendar
        result = await calendar.schedule_meeting(
            date=datetime_info['date'],
            time=datetime_info['time'],
            lead_info={"name": "Teste", "email": "teste@example.com"}
        )
        
        if result.get("success"):
            print(f"‚úÖ Agendamento bem-sucedido para segunda-feira")
            print(f"   ‚Üí {result.get('message')}")
            tests_passed += 1
            
            # Cancelar o evento criado
            if result.get("meeting_id"):
                await calendar.cancel_meeting(result["meeting_id"])
                print("   ‚Üí Evento de teste cancelado")
        else:
            if result.get("error") == "weekend_not_allowed":
                print(f"‚ùå Segunda-feira incorretamente bloqueada como fim de semana")
            else:
                print(f"‚ùå Erro ao agendar: {result.get('message')}")
    else:
        print("‚ùå Falhou ao extrair data/hora")
    
    # Teste 2: Agendamento em sexta-feira (dia √∫til)
    print("\nüìù Teste 2: Agendar em sexta-feira (dia √∫til)")
    print("-" * 50)
    tests_total += 1
    
    datetime_info = coordinator._extract_datetime("sexta as 14h")
    
    if datetime_info:
        print(f"   Data extra√≠da: {datetime_info['date']} {datetime_info['time']}")
        
        result = await calendar.schedule_meeting(
            date=datetime_info['date'],
            time=datetime_info['time'],
            lead_info={"name": "Teste", "email": "teste@example.com"}
        )
        
        if result.get("success"):
            print(f"‚úÖ Agendamento bem-sucedido para sexta-feira")
            tests_passed += 1
            
            if result.get("meeting_id"):
                await calendar.cancel_meeting(result["meeting_id"])
                print("   ‚Üí Evento de teste cancelado")
        else:
            print(f"‚ùå Erro ao agendar: {result.get('message')}")
    else:
        print("‚ùå Falhou ao extrair data/hora")
    
    # Teste 3: Bloqueio de s√°bado
    print("\nüìù Teste 3: Bloqueio de agendamento no s√°bado")
    print("-" * 50)
    tests_total += 1
    
    datetime_info = coordinator._extract_datetime("s√°bado as 10h")
    
    if datetime_info:
        print(f"   Data extra√≠da: {datetime_info['date']} {datetime_info['time']}")
        
        result = await calendar.schedule_meeting(
            date=datetime_info['date'],
            time=datetime_info['time'],
            lead_info={"name": "Teste", "email": "teste@example.com"}
        )
        
        if result.get("error") == "weekend_not_allowed":
            print(f"‚úÖ S√°bado corretamente bloqueado")
            print(f"   ‚Üí {result.get('message')}")
            tests_passed += 1
        elif result.get("success"):
            print(f"‚ùå ERRO: Permitiu agendar no s√°bado!")
            if result.get("meeting_id"):
                await calendar.cancel_meeting(result["meeting_id"])
        else:
            print(f"‚ùå Erro inesperado: {result.get('message')}")
    else:
        print("‚ùå Falhou ao extrair data/hora")
    
    # Teste 4: Bloqueio de domingo
    print("\nüìù Teste 4: Bloqueio de agendamento no domingo")
    print("-" * 50)
    tests_total += 1
    
    datetime_info = coordinator._extract_datetime("domingo as 15h")
    
    if datetime_info:
        print(f"   Data extra√≠da: {datetime_info['date']} {datetime_info['time']}")
        
        result = await calendar.schedule_meeting(
            date=datetime_info['date'],
            time=datetime_info['time'],
            lead_info={"name": "Teste", "email": "teste@example.com"}
        )
        
        if result.get("error") == "weekend_not_allowed":
            print(f"‚úÖ Domingo corretamente bloqueado")
            print(f"   ‚Üí {result.get('message')}")
            tests_passed += 1
        elif result.get("success"):
            print(f"‚ùå ERRO: Permitiu agendar no domingo!")
            if result.get("meeting_id"):
                await calendar.cancel_meeting(result["meeting_id"])
        else:
            print(f"‚ùå Erro inesperado: {result.get('message')}")
    else:
        print("‚ùå Falhou ao extrair data/hora")
    
    # Teste 5: Bloqueio de hor√°rio fora do expediente
    print("\nüìù Teste 5: Bloqueio de hor√°rio fora do expediente (20h)")
    print("-" * 50)
    tests_total += 1
    
    datetime_info = coordinator._extract_datetime("segunda as 20h")
    
    if datetime_info:
        print(f"   Data extra√≠da: {datetime_info['date']} {datetime_info['time']}")
        
        result = await calendar.schedule_meeting(
            date=datetime_info['date'],
            time="20:00",  # For√ßar hor√°rio fora do expediente
            lead_info={"name": "Teste", "email": "teste@example.com"}
        )
        
        if result.get("error") == "outside_business_hours":
            print(f"‚úÖ Hor√°rio fora do expediente corretamente bloqueado")
            print(f"   ‚Üí {result.get('message')}")
            tests_passed += 1
        elif result.get("success"):
            print(f"‚ùå ERRO: Permitiu agendar √†s 20h!")
            if result.get("meeting_id"):
                await calendar.cancel_meeting(result["meeting_id"])
        else:
            print(f"‚ö†Ô∏è Outro erro: {result.get('message')}")
    else:
        print("‚ùå Falhou ao extrair data/hora")
    
    # Teste 6: Hor√°rio dentro do expediente (10h)
    print("\nüìù Teste 6: Agendamento √†s 10h (dentro do expediente)")
    print("-" * 50)
    tests_total += 1
    
    datetime_info = coordinator._extract_datetime("ter√ßa as 10h")
    
    if datetime_info:
        print(f"   Data extra√≠da: {datetime_info['date']} {datetime_info['time']}")
        
        result = await calendar.schedule_meeting(
            date=datetime_info['date'],
            time=datetime_info['time'],
            lead_info={"name": "Teste", "email": "teste@example.com"}
        )
        
        if result.get("success"):
            print(f"‚úÖ Agendamento bem-sucedido dentro do expediente")
            tests_passed += 1
            
            if result.get("meeting_id"):
                await calendar.cancel_meeting(result["meeting_id"])
                print("   ‚Üí Evento de teste cancelado")
        else:
            print(f"‚ùå Erro ao agendar: {result.get('message')}")
    else:
        print("‚ùå Falhou ao extrair data/hora")
    
    # Resultado final
    print("\n" + "=" * 70)
    print(f"RESULTADO: {tests_passed}/{tests_total} testes passaram ({tests_passed*100/tests_total:.1f}%)")
    
    if tests_passed == tests_total:
        print("üéâ SUCESSO TOTAL: Sistema de agendamento funcionando perfeitamente!")
        print("\n‚úÖ Funcionalidades validadas:")
        print("   ‚Ä¢ Parsing correto de dias da semana em portugu√™s")
        print("   ‚Ä¢ Agendamento permitido em dias √∫teis (segunda a sexta)")
        print("   ‚Ä¢ Bloqueio efetivo de s√°bados e domingos")
        print("   ‚Ä¢ Bloqueio de hor√°rios fora do expediente (antes 8h, ap√≥s 17h)")
        print("   ‚Ä¢ Mensagens amig√°veis com sugest√µes de dias √∫teis")
    elif tests_passed >= tests_total * 0.8:
        print("‚úÖ BOM: Sistema funcionando adequadamente")
    else:
        print("‚ö†Ô∏è ATEN√á√ÉO: Sistema ainda precisa de ajustes")
    
    print("=" * 70)
    
    return tests_passed == tests_total

if __name__ == "__main__":
    result = asyncio.run(test_scheduling_complete())
    exit(0 if result else 1)