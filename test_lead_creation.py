#!/usr/bin/env python3
"""
Teste para validar a corre√ß√£o de cria√ß√£o de leads sem nome.
Este script simula o cen√°rio onde uma mensagem "oi?" deve criar um lead b√°sico.
"""

import asyncio
import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.agents.agentic_sdr_stateless import AgenticSDRStateless
from app.integrations.supabase_client import supabase_client

async def test_lead_creation_without_name():
    """
    Testa se um lead √© criado quando n√£o h√° nome extra√≠do da mensagem.
    """
    print("üß™ Iniciando teste de cria√ß√£o de lead sem nome...")
    
    # Dados de teste
    test_phone = "558182986181"
    test_message = "oi?"
    
    # Limpar lead existente se houver (para teste limpo)
    try:
        existing_lead = await supabase_client.get_lead_by_phone(test_phone)
        if existing_lead:
            print(f"‚ö†Ô∏è  Lead existente encontrado: {existing_lead.get('id')}")
            print("   Para teste limpo, considere usar outro n√∫mero ou limpar manualmente")
    except Exception as e:
        print(f"‚ùå Erro ao verificar lead existente: {e}")
        return False
    
    # Simular execution_context como seria no webhook
    execution_context = {
        "phone": test_phone,
        "lead_info": {},  # Lead vazio, como seria para nova conversa
        "conversation_id": "test-conversation-id",
        "conversation_history": [],
        "media": None,
        "timestamp": "2025-01-27T14:32:47.987Z"
    }
    
    try:
        # Inicializar agente
        agent = AgenticSDRStateless()
        await agent.initialize()
        
        print(f"üì± Processando mensagem: '{test_message}' do n√∫mero: {test_phone}")
        
        # Processar mensagem
        response, updated_lead_info = await agent.process_message(
            message=test_message,
            execution_context=execution_context
        )
        
        # O process_message retorna (response, lead_info) diretamente
        
        if updated_lead_info.get("id"):
            print(f"‚úÖ SUCESSO! Lead criado com ID: {updated_lead_info.get('id')}")
            print(f"   Nome: {updated_lead_info.get('name', 'N√£o definido')}")
            print(f"   Telefone: {updated_lead_info.get('phone_number')}")
            print(f"   Kommo ID: {updated_lead_info.get('kommo_lead_id', 'N√£o sincronizado')}")
            
            # Verificar no banco
            db_lead = await supabase_client.get_lead_by_phone(test_phone)
            if db_lead:
                print(f"‚úÖ Lead confirmado no Supabase: {db_lead.get('id')}")
                return True
            else:
                print("‚ùå Lead n√£o encontrado no Supabase")
                return False
        else:
            print("‚ùå FALHA! Lead n√£o foi criado")
            print(f"   Lead info retornado: {updated_lead_info}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """
    Fun√ß√£o principal do teste.
    """
    print("üöÄ Teste de Cria√ß√£o de Leads - Corre√ß√£o Implementada")
    print("=" * 60)
    
    success = await test_lead_creation_without_name()
    
    print("=" * 60)
    if success:
        print("üéâ TESTE PASSOU! A corre√ß√£o est√° funcionando corretamente.")
        print("   Leads agora s√£o criados mesmo sem nome extra√≠do da mensagem.")
    else:
        print("üí• TESTE FALHOU! Verifique a implementa√ß√£o.")
        print("   A corre√ß√£o pode n√£o ter sido aplicada corretamente.")
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)