#!/usr/bin/env python3
"""
Test: Verificar formata√ß√£o das 4 op√ß√µes de solu√ß√µes energ√©ticas
Garante que as quebras de linha est√£o funcionando corretamente
"""

import asyncio
import sys
from pathlib import Path

# Adicionar diret√≥rio do projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

from app.agents.agentic_sdr_stateless import AgenticSDRStateless


async def test_4_options_formatting():
    """
    Testa se o agente formata corretamente as 4 op√ß√µes com quebras de linha
    """
    print("\nüß™ Testando formata√ß√£o das 4 op√ß√µes de solu√ß√µes energ√©ticas...")
    print("=" * 60)
    
    # Criar inst√¢ncia do agente
    agent = AgenticSDRStateless()
    await agent.initialize()
    
    # Simular contexto ap√≥s coletar nome
    execution_context = {
        "phone": "+5511999999999",
        "conversation_id": "test-conv-123",
        "conversation_history": [
            {
                "role": "user",
                "content": "Oi",
                "timestamp": "2025-01-15T10:00:00"
            },
            {
                "role": "assistant", 
                "content": "Oi! Tudo bem? Me chamo Helen Vieira, sou consultora da Solarprime e irei realizar o seu atendimento. Antes de come√ßarmos, como posso te chamar?",
                "timestamp": "2025-01-15T10:00:10"
            }
        ],
        "lead_info": {
            "phone_number": "+5511999999999"
        }
    }
    
    # Simular resposta do usu√°rio com seu nome
    message = "Mateus"
    
    print("\nüì® Mensagem do usu√°rio:", message)
    print("\n‚è≥ Processando resposta do agente...")
    
    # Processar mensagem
    response = await agent.process_message(message, execution_context)
    
    print("\nüì§ Resposta do agente:")
    print("-" * 60)
    print(response)
    print("-" * 60)
    
    # Verificar se a resposta cont√©m quebras de linha nas op√ß√µes
    has_line_breaks = False
    has_numbered_options = False
    
    # Extrair conte√∫do da tag RESPOSTA_FINAL se existir
    if "<RESPOSTA_FINAL>" in response:
        start = response.find("<RESPOSTA_FINAL>") + len("<RESPOSTA_FINAL>")
        end = response.find("</RESPOSTA_FINAL>")
        if end > start:
            response_content = response[start:end].strip()
        else:
            response_content = response
    else:
        response_content = response
    
    # Verificar quebras de linha
    if "\n" in response_content:
        has_line_breaks = True
        print("\n‚úÖ Quebras de linha detectadas na resposta")
    else:
        print("\n‚ùå ERRO: N√£o foram encontradas quebras de linha na resposta")
    
    # Verificar se as 4 op√ß√µes est√£o numeradas
    options_found = []
    for i in range(1, 5):
        if f"{i})" in response_content:
            options_found.append(i)
    
    if len(options_found) == 4:
        has_numbered_options = True
        print("‚úÖ Todas as 4 op√ß√µes numeradas foram encontradas:", options_found)
    else:
        print(f"‚ùå ERRO: Apenas {len(options_found)} op√ß√µes encontradas:", options_found)
    
    # Verificar formata√ß√£o espec√≠fica
    expected_patterns = [
        "1) Instala√ß√£o de usina pr√≥pria",
        "2) Aluguel de lote",
        "3) Compra de energia com desconto",
        "4) Usina de investimento"
    ]
    
    patterns_found = []
    for pattern in expected_patterns:
        if pattern in response_content or pattern.replace(" de ", " ") in response_content:
            patterns_found.append(pattern)
    
    if len(patterns_found) >= 3:  # Pelo menos 3 das 4 op√ß√µes
        print(f"‚úÖ Padr√µes de op√ß√µes encontrados ({len(patterns_found)}/4):")
        for p in patterns_found:
            print(f"   - {p}")
    else:
        print(f"‚ùå ERRO: Poucos padr√µes encontrados ({len(patterns_found)}/4)")
    
    # An√°lise detalhada das linhas
    print("\nüìä An√°lise detalhada das linhas:")
    lines = response_content.split("\n")
    for i, line in enumerate(lines, 1):
        if any(opt in line for opt in ["1)", "2)", "3)", "4)"]):
            print(f"   Linha {i}: {line[:80]}{'...' if len(line) > 80 else ''}")
    
    # Resultado final
    print("\n" + "=" * 60)
    if has_line_breaks and has_numbered_options and len(patterns_found) >= 3:
        print("‚úÖ SUCESSO: Formata√ß√£o das 4 op√ß√µes est√° CORRETA!")
        print("   - Quebras de linha: ‚úÖ")
        print("   - Op√ß√µes numeradas: ‚úÖ")
        print("   - Padr√µes corretos: ‚úÖ")
        return True
    else:
        print("‚ùå FALHA: A formata√ß√£o das 4 op√ß√µes precisa de ajustes")
        print(f"   - Quebras de linha: {'‚úÖ' if has_line_breaks else '‚ùå'}")
        print(f"   - Op√ß√µes numeradas: {'‚úÖ' if has_numbered_options else '‚ùå'}")
        print(f"   - Padr√µes corretos: {'‚úÖ' if len(patterns_found) >= 3 else '‚ùå'}")
        return False


async def main():
    """Executa o teste"""
    print("=" * 60)
    print("üî¨ TESTE: Formata√ß√£o das 4 Op√ß√µes de Solu√ß√µes Energ√©ticas")
    print("=" * 60)
    
    try:
        success = await test_4_options_formatting()
        
        if success:
            print("\nüéâ Teste conclu√≠do com sucesso!")
            print("As 4 op√ß√µes est√£o sendo formatadas corretamente com quebras de linha.")
        else:
            print("\n‚ö†Ô∏è O teste identificou problemas na formata√ß√£o.")
            print("Verifique o prompt do agente para garantir que as exce√ß√µes")
            print("de quebra de linha est√£o sendo aplicadas corretamente.")
        
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())