#!/usr/bin/env python3
"""
Teste para validar se o processamento multimodal est√° funcionando corretamente
ap√≥s as corre√ß√µes do EmojiLogger.
"""

import os
import sys
import asyncio
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Carrega vari√°veis de ambiente
from dotenv import load_dotenv
load_dotenv()

print(f"‚úÖ Arquivo .env encontrado: {project_root}/.env")

from app.services.knowledge_service import KnowledgeService
from app.integrations.evolution import EvolutionAPIClient
from app.utils.logger import emoji_logger
from app.agents.agentic_sdr_stateless import AgenticSDRStateless

async def test_multimodal_processing():
    """Testa o processamento multimodal completo"""
    print("üöÄ Iniciando teste de processamento multimodal...")
    
    try:
        # 1. Inicializar servi√ßos
        print("\nüîß Inicializando servi√ßos...")
        knowledge_service = KnowledgeService()
        
        # 2. Verificar se o AgenticSDR pode ser inicializado
        print("\nü§ñ Testando inicializa√ß√£o do AgenticSDR...")
        try:
            sdr = AgenticSDRStateless()
            print("‚úÖ AgenticSDR inicializado com sucesso")
            
            # Verificar se o multimodal existe
            if hasattr(sdr, 'multimodal'):
                print("‚úÖ MultimodalProcessor encontrado no AgenticSDR")
                
                # Verificar m√©todos do multimodal
                processor = sdr.multimodal
                if hasattr(processor, 'process_media'):
                    print("‚úÖ M√©todo process_media encontrado")
                else:
                    print("‚ùå M√©todo process_media n√£o encontrado")
                    
                if hasattr(processor, 'process_image'):
                    print("‚úÖ M√©todo process_image encontrado")
                else:
                    print("‚ùå M√©todo process_image n√£o encontrado")
                    
                if hasattr(processor, 'process_audio'):
                    print("‚úÖ M√©todo process_audio encontrado")
                else:
                    print("‚ùå M√©todo process_audio n√£o encontrado")
                    
                if hasattr(processor, 'process_document'):
                    print("‚úÖ M√©todo process_document encontrado")
                else:
                    print("‚ùå M√©todo process_document n√£o encontrado")
                    
            else:
                print("‚ùå MultimodalProcessor n√£o encontrado no AgenticSDR")
                
        except Exception as e:
            emoji_logger.system_error("Multimodal Test", f"Erro ao inicializar AgenticSDR: {e}")
            print(f"‚ùå Erro ao inicializar AgenticSDR: {e}")
        
        # 3. Testar Evolution API para m√≠dia
        print("\nüì± Testando Evolution API para processamento de m√≠dia...")
        try:
            evolution = EvolutionAPIClient()
            
            # Verificar m√©todos de m√≠dia
            if hasattr(evolution, 'get_media_as_base64'):
                print("‚úÖ M√©todo get_media_as_base64 encontrado")
            else:
                print("‚ùå M√©todo get_media_as_base64 n√£o encontrado")
                
            if hasattr(evolution, 'download_media'):
                print("‚úÖ M√©todo download_media encontrado")
            else:
                print("‚ùå M√©todo download_media n√£o encontrado")
                
        except Exception as e:
            emoji_logger.system_error("Evolution Test", f"Erro ao testar Evolution API: {e}")
            print(f"‚ùå Erro ao testar Evolution API: {e}")
        
        # 4. Verificar se os logs do EmojiLogger est√£o funcionando
        print("\nüìù Testando logs do EmojiLogger...")
        emoji_logger.system_info("Teste de log de informa√ß√£o")
        emoji_logger.system_success("Teste de log de sucesso")
        emoji_logger.system_error("Multimodal Test", "Teste de log de erro (simulado)")
        print("‚úÖ Logs do EmojiLogger funcionando")
        
        print("\n‚úÖ Teste de valida√ß√£o multimodal conclu√≠do!")
        
    except Exception as e:
        emoji_logger.system_error("Multimodal Validation", f"Erro durante teste de valida√ß√£o: {e}")
        print(f"‚ùå Erro durante teste: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(test_multimodal_processing())