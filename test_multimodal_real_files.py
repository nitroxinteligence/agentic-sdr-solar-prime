#!/usr/bin/env python
"""
Teste do OCR com arquivos REAIS de PDFs e imagens
Valida se a solu√ß√£o de OCR funciona com documentos reais
"""

import asyncio
import base64
from pathlib import Path
from app.core.multimodal_processor import MultimodalProcessor
from app.utils.logger import emoji_logger

async def test_real_files():
    """
    Testa o OCR com arquivos reais da pasta tests/
    """
    emoji_logger.system_info("üß™ TESTE COM ARQUIVOS REAIS - MultimodalProcessor com OCR")
    emoji_logger.system_info("=" * 60)
    
    # Inicializar processor
    processor = MultimodalProcessor()
    processor.initialize()
    
    # Caminho para os arquivos de teste
    test_dir = Path("tests")
    
    # =============================================
    # 1. TESTE COM PDF REAL (Boleto.pdf)
    # =============================================
    pdf_file = test_dir / "Boleto.pdf"
    
    if pdf_file.exists():
        emoji_logger.system_info(f"üìÑ Testando PDF real: {pdf_file.name}")
        
        # Ler arquivo e converter para base64
        with open(pdf_file, "rb") as f:
            pdf_bytes = f.read()
            pdf_base64 = base64.b64encode(pdf_bytes).decode('utf-8')
            pdf_base64 = f"data:application/pdf;base64,{pdf_base64}"
        
        # Processar PDF
        result = await processor.process_document(pdf_base64)
        
        if result["success"]:
            emoji_logger.system_success("‚úÖ PDF processado com sucesso!")
            
            # Mostrar metadados
            metadata = result.get("metadata", {})
            emoji_logger.system_info(f"  üìù Tipo: {metadata.get('doc_type', 'unknown')}")
            emoji_logger.system_info(f"  üî§ Caracteres extra√≠dos: {metadata.get('char_count', 0)}")
            emoji_logger.system_info(f"  üì∏ OCR usado: {metadata.get('ocr_used', False)}")
            
            # An√°lise do conte√∫do
            analysis = result.get("analysis", {})
            if analysis.get("is_bill"):
                emoji_logger.system_success(f"  üí≥ Documento identificado como: {analysis.get('document_type', 'conta')}")
                
                if analysis.get("bill_value"):
                    emoji_logger.system_success(f"  üí∞ VALOR DETECTADO: R$ {analysis['bill_value']:.2f}")
                else:
                    emoji_logger.system_warning("  ‚ö†Ô∏è Valor n√£o detectado no documento")
            
            # Preview do texto
            text = result.get("text", "")
            if text:
                preview = text[:300].replace('\n', ' ')
                emoji_logger.system_info(f"  üìñ Preview: {preview}...")
                
                # Buscar valores no texto
                import re
                valores = re.findall(r"R\$\s*(\d+[.,]\d{2})", text)
                if valores:
                    emoji_logger.system_info(f"  üíµ Valores encontrados no texto: {valores[:5]}")
            else:
                emoji_logger.system_warning("  ‚ö†Ô∏è Nenhum texto extra√≠do")
                
        else:
            emoji_logger.system_error(f"‚ùå Falha ao processar PDF: {result.get('message', 'Erro desconhecido')}")
    else:
        emoji_logger.system_warning(f"‚ö†Ô∏è Arquivo {pdf_file} n√£o encontrado")
    
    emoji_logger.system_info("=" * 60)
    
    # =============================================
    # 2. TESTE COM IMAGEM REAL (conta de luz)
    # =============================================
    image_file = test_dir / "20250715_164305.png"
    
    if image_file.exists():
        emoji_logger.system_info(f"üì∏ Testando imagem real: {image_file.name}")
        
        # Ler arquivo e converter para base64
        with open(image_file, "rb") as f:
            img_bytes = f.read()
            img_base64 = base64.b64encode(img_bytes).decode('utf-8')
            img_base64 = f"data:image/png;base64,{img_base64}"
        
        # Processar imagem
        result = await processor.process_image(img_base64)
        
        if result["success"]:
            emoji_logger.system_success("‚úÖ Imagem processada com sucesso!")
            
            # Mostrar metadados
            metadata = result.get("metadata", {})
            emoji_logger.system_info(f"  üìê Dimens√µes: {metadata.get('width')}x{metadata.get('height')}")
            emoji_logger.system_info(f"  üñºÔ∏è Formato: {metadata.get('format', 'unknown')}")
            
            # An√°lise do conte√∫do
            analysis = result.get("analysis", {})
            if analysis.get("is_bill"):
                emoji_logger.system_success("  üí° Imagem identificada como conta de energia!")
                
                if analysis.get("bill_value"):
                    emoji_logger.system_success(f"  üí∞ VALOR DETECTADO: R$ {analysis['bill_value']:.2f}")
                else:
                    emoji_logger.system_warning("  ‚ö†Ô∏è Valor n√£o detectado na imagem")
            
            # Preview do texto OCR
            text = result.get("text", "")
            if text:
                preview = text[:300].replace('\n', ' ')
                emoji_logger.system_info(f"  üìñ OCR Preview: {preview}...")
                
                # Buscar valores no texto
                import re
                valores = re.findall(r"R\$\s*(\d+[.,]\d{2})", text)
                if valores:
                    emoji_logger.system_info(f"  üíµ Valores encontrados via OCR: {valores[:5]}")
            else:
                emoji_logger.system_warning("  ‚ö†Ô∏è OCR n√£o extraiu texto da imagem")
                
        else:
            emoji_logger.system_error(f"‚ùå Falha ao processar imagem: {result.get('message', 'Erro desconhecido')}")
    else:
        emoji_logger.system_warning(f"‚ö†Ô∏è Arquivo {image_file} n√£o encontrado")
    
    emoji_logger.system_info("=" * 60)
    
    # =============================================
    # 3. TESTE COM √ÅUDIO REAL (opcional)
    # =============================================
    audio_file = test_dir / "WhatsApp Audio 2025-08-03 at 22.31.42.opus"
    
    if audio_file.exists():
        emoji_logger.system_info(f"üé§ Testando √°udio real: {audio_file.name}")
        
        try:
            # Ler arquivo e converter para base64
            with open(audio_file, "rb") as f:
                audio_bytes = f.read()
                audio_base64 = base64.b64encode(audio_bytes).decode('utf-8')
                audio_base64 = f"data:audio/opus;base64,{audio_base64}"
            
            # Processar √°udio
            result = await processor.process_audio(audio_base64)
            
            if result["success"]:
                emoji_logger.system_success("‚úÖ √Åudio processado com sucesso!")
                
                # Mostrar metadados
                metadata = result.get("metadata", {})
                emoji_logger.system_info(f"  ‚è±Ô∏è Dura√ß√£o: {metadata.get('duration', 0):.1f} segundos")
                emoji_logger.system_info(f"  üéµ Canais: {metadata.get('channels', 0)}")
                emoji_logger.system_info(f"  üìä Taxa: {metadata.get('sample_rate', 0)} Hz")
                
                # Transcri√ß√£o
                text = result.get("text", "")
                if text:
                    emoji_logger.system_success(f"  üìù Transcri√ß√£o: \"{text[:200]}...\"")
                else:
                    emoji_logger.system_warning("  ‚ö†Ô∏è Transcri√ß√£o vazia")
            else:
                emoji_logger.system_warning(f"‚ö†Ô∏è √Åudio n√£o processado: {result.get('message', '')}")
                
        except Exception as e:
            emoji_logger.system_warning(f"‚ö†Ô∏è Erro ao processar √°udio: {e}")
    
    emoji_logger.system_info("=" * 60)
    emoji_logger.system_success("üéâ TESTE COM ARQUIVOS REAIS CONCLU√çDO!")
    
    # Resumo
    emoji_logger.system_info("\nüìä RESUMO DO TESTE:")
    emoji_logger.system_info("1. PDF (Boleto.pdf) - Testado com OCR fallback")
    emoji_logger.system_info("2. Imagem (conta de luz PNG) - Testado com OCR direto")
    emoji_logger.system_info("3. √Åudio (WhatsApp) - Testado transcri√ß√£o")
    emoji_logger.system_info("\n‚úÖ Solu√ß√£o de OCR implementada e funcionando!")

if __name__ == "__main__":
    asyncio.run(test_real_files())