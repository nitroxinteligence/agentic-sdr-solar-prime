#!/usr/bin/env python3
"""
üß™ Teste das Melhorias do Team Coordinator
Valida a an√°lise inteligente de inten√ß√£o para acionamento de servi√ßos
"""

import asyncio
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath('.'))

from app.core.team_coordinator import TeamCoordinator
from app.utils.logger import emoji_logger

def test_calendar_intent_analysis():
    """Testa a an√°lise de inten√ß√£o para Calendar Service"""
    coordinator = TeamCoordinator()
    
    test_cases = [
        # Casos que DEVEM ativar Calendar (score >= 0.35)
        {
            "message": "Quero agendar uma reuni√£o com Leonardo amanh√£",
            "context": {"user_intent": "agendar reuni√£o", "conversation_stage": "qualifica√ß√£o"},
            "expected": "HIGH",
            "description": "Inten√ß√£o clara + urg√™ncia + stage avan√ßado"
        },
        {
            "message": "Podemos conversar hoje √†s 14h?",
            "context": {"urgency_level": "alta"},
            "expected": "HIGH", 
            "description": "Tempo espec√≠fico + urg√™ncia alta"
        },
        {
            "message": "Vamos marcar para quando voc√™ tem dispon√≠vel",
            "context": {"conversation_stage": "negocia√ß√£o"},
            "expected": "HIGH",
            "description": "Inten√ß√£o forte + stage avan√ßado"
        },
        
        # Casos que N√ÉO devem ativar Calendar (score < 0.35)
        {
            "message": "Obrigado pelas informa√ß√µes sobre energia solar",
            "context": {},
            "expected": "LOW",
            "description": "Sem indicadores de agendamento"
        },
        {
            "message": "Meu nome √© Jo√£o e tenho interesse",
            "context": {"conversation_stage": "in√≠cio"},
            "expected": "LOW",
            "description": "Apenas dados pessoais"
        },
        
        # Casos lim√≠trofes que podem ativar dependendo do contexto
        {
            "message": "Quando voc√™s atendem?",
            "context": {"user_intent": "hor√°rio de funcionamento"},
            "expected": "MEDIUM",
            "description": "Pergunta sobre hor√°rio (amb√≠gua)"
        }
    ]
    
    print("üß™ TESTE: An√°lise de Inten√ß√£o para Calendar Service")
    print("=" * 60)
    
    passed = 0
    total = len(test_cases)
    
    for i, case in enumerate(test_cases, 1):
        scores = coordinator.analyze_service_need(case["message"], case["context"])
        calendar_score = scores["calendar"]
        
        # Calcular threshold din√¢mico
        dynamic_threshold = coordinator._get_dynamic_threshold("calendar", case["context"])
        
        # Determinar se seria ativado
        would_activate = calendar_score >= dynamic_threshold
        
        # Verificar expectativa
        expected = case["expected"]
        if expected == "HIGH" and would_activate:
            result = "‚úÖ PASS"
            passed += 1
        elif expected == "LOW" and not would_activate:
            result = "‚úÖ PASS"
            passed += 1
        elif expected == "MEDIUM":
            result = "‚ö° INFO" 
            passed += 1  # Casos MEDIUM s√£o informativos
        else:
            result = "‚ùå FAIL"
        
        print(f"\n{i}. {case['description']}")
        print(f"   Mensagem: '{case['message']}'")
        print(f"   Contexto: {case['context']}")
        print(f"   Score: {calendar_score:.3f} | Threshold: {dynamic_threshold:.3f}")
        print(f"   Ativaria: {'SIM' if would_activate else 'N√ÉO'}")
        print(f"   Resultado: {result}")
    
    print(f"\nüèÜ RESULTADO: {passed}/{total} casos passaram")
    print(f"üìä Taxa de sucesso: {(passed/total)*100:.1f}%")
    
    return passed == total

def test_scoring_breakdown():
    """Testa o detalhamento do scoring para debug"""
    coordinator = TeamCoordinator()
    
    print("\nüîç TESTE: Breakdown Detalhado do Scoring")
    print("=" * 60)
    
    test_message = "Quero agendar reuni√£o com Leonardo para hoje √†s 15h"
    test_context = {
        "user_intent": "agendar reuni√£o",
        "conversation_stage": "qualifica√ß√£o", 
        "urgency_level": "alta"
    }
    
    print(f"Mensagem: '{test_message}'")
    print(f"Contexto: {test_context}")
    print()
    
    # Analisar score do calendar step by step
    message_lower = test_message.lower()
    calendar_score = 0.0
    
    # 1. Keywords b√°sicas
    basic_keywords = [
        "agendar", "marcar", "reuni√£o", "conversar", "leonardo",
        "hor√°rio", "dispon√≠vel", "data", "quando", "encontro"
    ]
    keyword_matches = sum(1 for kw in basic_keywords if kw in message_lower)
    keyword_score = min(0.4, keyword_matches * 0.2)
    calendar_score += keyword_score
    print(f"1. Keywords ({keyword_matches} matches): +{keyword_score:.3f}")
    
    # 2. Inten√ß√µes fortes
    strong_intent_phrases = [
        "quero agendar", "vamos marcar", "podemos conversar",
        "falar com leonardo", "marcar reuni√£o", "que hor√°rio",
        "estou dispon√≠vel", "quando posso", "vamos falar"
    ]
    intent_bonus = 0.0
    for phrase in strong_intent_phrases:
        if phrase in message_lower:
            intent_bonus = 0.4
            break
    calendar_score += intent_bonus
    print(f"2. Inten√ß√£o forte: +{intent_bonus:.3f}")
    
    # 3. Urg√™ncia
    urgency_indicators = [
        "hoje", "amanh√£", "logo", "r√°pido", "urgente",
        "j√°", "agora", "preciso", "importante"
    ]
    urgency_bonus = 0.3 if any(indicator in message_lower for indicator in urgency_indicators) else 0.0
    calendar_score += urgency_bonus
    print(f"3. Urg√™ncia: +{urgency_bonus:.3f}")
    
    # 4. Tempo espec√≠fico
    import re
    time_patterns = [
        r"\d{1,2}h\d{0,2}", r"\d{1,2}:\d{2}", r"\d{1,2}/\d{1,2}",
        "manh√£", "tarde", "noite", "segunda", "ter√ßa", "quarta", 
        "quinta", "sexta", "s√°bado", "domingo"
    ]
    time_bonus = 0.0
    for pattern in time_patterns:
        if re.search(pattern, message_lower):
            time_bonus = 0.5
            break
    calendar_score += time_bonus
    print(f"4. Tempo espec√≠fico: +{time_bonus:.3f}")
    
    print(f"\nüìä Score base: {calendar_score:.3f}")
    
    # 5. Boosts inteligentes
    user_intent_boost = 0.4 if "agendar" in test_context.get("user_intent", "").lower() else 0.0
    stage_boost = 0.3 if test_context.get("conversation_stage", "").lower() in ["qualifica√ß√£o", "negocia√ß√£o", "fechamento"] else 0.0
    
    calendar_score += user_intent_boost + stage_boost
    print(f"5. Boost user_intent: +{user_intent_boost:.3f}")
    print(f"6. Boost conversation_stage: +{stage_boost:.3f}")
    
    final_score = min(1.0, calendar_score)
    print(f"\nüéØ Score final: {final_score:.3f}")
    
    # Threshold din√¢mico
    dynamic_threshold = coordinator._get_dynamic_threshold("calendar", test_context)
    print(f"üö¶ Threshold din√¢mico: {dynamic_threshold:.3f}")
    
    would_activate = final_score >= dynamic_threshold
    print(f"‚úÖ Ativaria Calendar: {'SIM' if would_activate else 'N√ÉO'}")
    
    return would_activate

def test_context_boost():
    """Testa diferentes cen√°rios de boost por contexto"""
    coordinator = TeamCoordinator()
    
    print("\nüöÄ TESTE: Boost Inteligente por Contexto")
    print("=" * 60)
    
    base_message = "agendar"
    
    contexts = [
        {
            "name": "Sem contexto",
            "context": {},
            "expected_boost": "baixo"
        },
        {
            "name": "User intent claro",
            "context": {"user_intent": "agendar reuni√£o"},
            "expected_boost": "alto"
        },
        {
            "name": "Stage avan√ßado",
            "context": {"conversation_stage": "qualifica√ß√£o"},
            "expected_boost": "alto"
        },
        {
            "name": "Urg√™ncia alta",
            "context": {"urgency_level": "alta"},
            "expected_boost": "muito_alto"
        },
        {
            "name": "Contexto completo",
            "context": {
                "user_intent": "agendar reuni√£o",
                "conversation_stage": "negocia√ß√£o",
                "urgency_level": "alta"
            },
            "expected_boost": "m√°ximo"
        }
    ]
    
    for i, test in enumerate(contexts, 1):
        scores = coordinator.analyze_service_need(base_message, test["context"])
        threshold = coordinator._get_dynamic_threshold("calendar", test["context"])
        
        print(f"\n{i}. {test['name']}")
        print(f"   Contexto: {test['context']}")
        print(f"   Score Calendar: {scores['calendar']:.3f}")
        print(f"   Threshold: {threshold:.3f}")
        print(f"   Ativaria: {'SIM' if scores['calendar'] >= threshold else 'N√ÉO'}")

async def main():
    """Executa todos os testes"""
    emoji_logger.system_event("üß™ Iniciando testes do Team Coordinator")
    
    success = True
    
    try:
        # Teste 1: An√°lise de inten√ß√£o
        if not test_calendar_intent_analysis():
            success = False
        
        # Teste 2: Breakdown detalhado
        test_scoring_breakdown()
        
        # Teste 3: Boost por contexto
        test_context_boost()
        
        if success:
            emoji_logger.system_success("‚úÖ Todos os testes passaram!")
        else:
            emoji_logger.system_error("‚ùå Alguns testes falharam")
            
    except Exception as e:
        emoji_logger.system_error(f"Erro durante os testes: {e}")
        success = False
    
    return success

if __name__ == "__main__":
    asyncio.run(main())