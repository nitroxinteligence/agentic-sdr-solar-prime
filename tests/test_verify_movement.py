#!/usr/bin/env python3
"""
Verifica√ß√£o r√°pida se a movimenta√ß√£o est√° funcionando
"""

import asyncio
from datetime import datetime
from app.services.crm_service_100_real import CRMServiceReal

async def test_movement():
    print("=" * 60)
    print("üéØ TESTE FINAL: VERIFICA√á√ÉO DE MOVIMENTA√á√ÉO")
    print("=" * 60)
    
    crm = CRMServiceReal()
    await crm.initialize()
    
    # Criar lead de teste
    test_name = f"TESTE FINAL NAO INTERESSADO {datetime.now().strftime('%H:%M:%S')}"
    lead_data = {
        "phone": f"5511999{datetime.now().strftime('%H%M%S')}",
        "name": test_name,
        "source": "teste_final"
    }
    
    result = await crm.create_or_update_lead(lead_data)
    if not result.get("success"):
        print(f"‚ùå Erro ao criar lead")
        return
    
    lead_id = str(result["lead_id"])
    print(f"‚úÖ Lead criado: {test_name} (ID={lead_id})")
    
    # Mover para N√ÉO INTERESSADO
    print(f"\nüîÑ Movendo para N√ÉO INTERESSADO...")
    stage_result = await crm.update_lead_stage(
        lead_id=lead_id,
        stage="nao_interessado",
        notes="Teste final de movimenta√ß√£o"
    )
    
    if stage_result.get("success"):
        print(f"‚úÖ Comando executado com sucesso")
    else:
        print(f"‚ùå Erro: {stage_result}")
        return
    
    # Aguardar e verificar
    await asyncio.sleep(2)
    
    # Verificar posi√ß√£o
    info = await crm.get_lead_info(lead_id)
    if info.get("success"):
        status_id = info["lead"]["status"]
        
        if status_id == 89709599:
            print(f"\nüéâ SUCESSO TOTAL!")
            print(f"‚úÖ Lead '{test_name}' est√° em N√ÉO INTERESSADO")
            print(f"‚úÖ Sistema 100% FUNCIONAL para movimenta√ß√£o de cards!")
        else:
            print(f"\n‚ùå FALHA!")
            print(f"Lead est√° no status {status_id}, esperado 89709599")
    
    await crm.close()
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_movement())