#!/usr/bin/env python3
"""
Teste do bloqueio de agendamento fora do hor√°rio comercial
Valida que o sistema bloqueia finais de semana e hor√°rios fora do expediente
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import asyncio
from datetime import datetime, timedelta

async def test_business_hours_blocking():
    """Testa o bloqueio de hor√°rios fora do expediente"""
    
    print("=" * 70)
    print("TESTE: Bloqueio de Hor√°rio Comercial")
    print("=" * 70)
    
    from app.services.calendar_service_100_real import CalendarServiceReal
    
    # Criar inst√¢ncia do servi√ßo
    calendar_service = CalendarServiceReal()
    
    tests_passed = 0
    tests_total = 0
    
    print("\nüìù Teste 1: Valida√ß√£o de hor√°rio comercial")
    print("-" * 50)
    
    # Teste 1: Segunda-feira √†s 10h (DEVE PASSAR)
    tests_total += 1
    monday_10am = datetime(2025, 8, 18, 10, 0)  # Segunda, 18/08/2025, 10:00
    if calendar_service.is_business_hours(monday_10am):
        print("‚úÖ Segunda-feira 10h: Dentro do hor√°rio comercial")
        tests_passed += 1
    else:
        print("‚ùå Segunda-feira 10h: Incorretamente bloqueado")
    
    # Teste 2: Sexta-feira √†s 16h (DEVE PASSAR)
    tests_total += 1
    friday_4pm = datetime(2025, 8, 22, 16, 0)  # Sexta, 22/08/2025, 16:00
    if calendar_service.is_business_hours(friday_4pm):
        print("‚úÖ Sexta-feira 16h: Dentro do hor√°rio comercial")
        tests_passed += 1
    else:
        print("‚ùå Sexta-feira 16h: Incorretamente bloqueado")
    
    # Teste 3: S√°bado √†s 10h (DEVE BLOQUEAR)
    tests_total += 1
    saturday_10am = datetime(2025, 8, 23, 10, 0)  # S√°bado, 23/08/2025, 10:00
    if not calendar_service.is_business_hours(saturday_10am):
        print("‚úÖ S√°bado 10h: Corretamente bloqueado")
        tests_passed += 1
    else:
        print("‚ùå S√°bado 10h: N√£o foi bloqueado")
    
    # Teste 4: Domingo √†s 14h (DEVE BLOQUEAR)
    tests_total += 1
    sunday_2pm = datetime(2025, 8, 24, 14, 0)  # Domingo, 24/08/2025, 14:00
    if not calendar_service.is_business_hours(sunday_2pm):
        print("‚úÖ Domingo 14h: Corretamente bloqueado")
        tests_passed += 1
    else:
        print("‚ùå Domingo 14h: N√£o foi bloqueado")
    
    # Teste 5: Segunda √†s 7h (DEVE BLOQUEAR - antes do expediente)
    tests_total += 1
    monday_7am = datetime(2025, 8, 18, 7, 0)  # Segunda, 18/08/2025, 07:00
    if not calendar_service.is_business_hours(monday_7am):
        print("‚úÖ Segunda 7h: Corretamente bloqueado (antes do expediente)")
        tests_passed += 1
    else:
        print("‚ùå Segunda 7h: N√£o foi bloqueado")
    
    # Teste 6: Ter√ßa √†s 18h (DEVE BLOQUEAR - ap√≥s expediente)
    tests_total += 1
    tuesday_6pm = datetime(2025, 8, 19, 18, 0)  # Ter√ßa, 19/08/2025, 18:00
    if not calendar_service.is_business_hours(tuesday_6pm):
        print("‚úÖ Ter√ßa 18h: Corretamente bloqueado (ap√≥s expediente)")
        tests_passed += 1
    else:
        print("‚ùå Ter√ßa 18h: N√£o foi bloqueado")
    
    print("\nüìù Teste 2: Pr√≥ximo dia √∫til")
    print("-" * 50)
    
    # Teste 7: Pr√≥ximo dia √∫til de sexta
    tests_total += 1
    friday = datetime(2025, 8, 22, 10, 0)  # Sexta
    next_day = calendar_service.get_next_business_day(friday + timedelta(days=1))
    if next_day.weekday() == 0:  # Segunda
        print(f"‚úÖ Pr√≥ximo dia √∫til ap√≥s sexta: Segunda ({next_day.strftime('%d/%m')})")
        tests_passed += 1
    else:
        print(f"‚ùå Pr√≥ximo dia √∫til incorreto: {next_day.strftime('%A, %d/%m')}")
    
    # Teste 8: Pr√≥ximo dia √∫til de s√°bado
    tests_total += 1
    saturday = datetime(2025, 8, 23, 10, 0)  # S√°bado
    next_day = calendar_service.get_next_business_day(saturday)
    if next_day.weekday() == 0:  # Segunda
        print(f"‚úÖ Pr√≥ximo dia √∫til de s√°bado: Segunda ({next_day.strftime('%d/%m')})")
        tests_passed += 1
    else:
        print(f"‚ùå Pr√≥ximo dia √∫til incorreto: {next_day.strftime('%A, %d/%m')}")
    
    print("\nüìù Teste 3: Mensagem de hor√°rio comercial")
    print("-" * 50)
    
    # Teste 9: Formato da mensagem
    tests_total += 1
    message = calendar_service.format_business_hours_message()
    if "Segunda a Sexta" in message and "8h" in message and "17h" in message:
        print(f"‚úÖ Mensagem formatada: {message}")
        tests_passed += 1
    else:
        print(f"‚ùå Mensagem incorreta: {message}")
    
    print("\nüìù Teste 4: Valida√ß√£o no schedule_meeting (simulado)")
    print("-" * 50)
    
    # Teste 10: Simular tentativa de agendar no s√°bado
    tests_total += 1
    saturday_date = "2025-08-23"  # S√°bado
    saturday_time = "10:00"
    
    # Simular o que aconteceria (sem fazer chamada real ao Google)
    meeting_datetime = datetime.strptime(f"{saturday_date} {saturday_time}", "%Y-%m-%d %H:%M")
    
    if not calendar_service.is_business_hours(meeting_datetime):
        print("‚úÖ Agendamento no s√°bado seria bloqueado")
        tests_passed += 1
        
        # Verificar mensagem de erro
        if meeting_datetime.weekday() in [5, 6]:
            print("   ‚Üí Mensagem: 'N√£o agendamos reuni√µes aos finais de semana'")
            next_business = calendar_service.get_next_business_day(meeting_datetime)
            print(f"   ‚Üí Sugest√£o: Segunda-feira, {next_business.strftime('%d/%m')}")
    else:
        print("‚ùå Agendamento no s√°bado N√ÉO seria bloqueado")
    
    # Teste 11: Simular tentativa de agendar √†s 20h
    tests_total += 1
    evening_date = "2025-08-18"  # Segunda
    evening_time = "20:00"
    
    meeting_datetime = datetime.strptime(f"{evening_date} {evening_time}", "%Y-%m-%d %H:%M")
    
    if not calendar_service.is_business_hours(meeting_datetime):
        print("‚úÖ Agendamento √†s 20h seria bloqueado")
        tests_passed += 1
        print("   ‚Üí Mensagem: 'Esse hor√°rio est√° fora do nosso expediente'")
        print(f"   ‚Üí Hor√°rio comercial: {calendar_service.format_business_hours_message()}")
    else:
        print("‚ùå Agendamento √†s 20h N√ÉO seria bloqueado")
    
    # Teste 12: Simular tentativa de agendar √†s 6h da manh√£
    tests_total += 1
    early_date = "2025-08-18"  # Segunda
    early_time = "06:00"
    
    meeting_datetime = datetime.strptime(f"{early_date} {early_time}", "%Y-%m-%d %H:%M")
    
    if not calendar_service.is_business_hours(meeting_datetime):
        print("‚úÖ Agendamento √†s 6h seria bloqueado")
        tests_passed += 1
        print("   ‚Üí Mensagem: 'Esse hor√°rio est√° fora do nosso expediente'")
    else:
        print("‚ùå Agendamento √†s 6h N√ÉO seria bloqueado")
    
    # Resultado final
    print("\n" + "=" * 70)
    print(f"RESULTADO: {tests_passed}/{tests_total} testes passaram ({tests_passed*100/tests_total:.1f}%)")
    
    if tests_passed == tests_total:
        print("üéâ SUCESSO TOTAL: Bloqueio de hor√°rio comercial funcionando!")
        print("\n‚úÖ Sistema configurado para:")
        print("   ‚Ä¢ Bloquear agendamentos aos s√°bados e domingos")
        print("   ‚Ä¢ Permitir apenas de Segunda a Sexta")
        print("   ‚Ä¢ Hor√°rio: 8h √†s 17h")
        print("   ‚Ä¢ Mensagens amig√°veis ao usu√°rio")
        print("   ‚Ä¢ Sugest√µes de dias/hor√°rios alternativos")
    elif tests_passed >= tests_total * 0.8:
        print("‚úÖ BOM: Sistema funcionando adequadamente")
    else:
        print("‚ö†Ô∏è ATEN√á√ÉO: Sistema precisa de ajustes")
    
    print("=" * 70)
    
    return tests_passed == tests_total

if __name__ == "__main__":
    result = asyncio.run(test_business_hours_blocking())
    exit(0 if result else 1)