"""
Teste de valida√ß√£o para corre√ß√µes de repeti√ß√£o e agendamento
"""

import asyncio
from app.core.team_coordinator import TeamCoordinator

async def test_calendar_detection_improvements():
    """Testa melhorias na detec√ß√£o de inten√ß√£o de calend√°rio"""
    coordinator = TeamCoordinator()
    
    print("=" * 60)
    print("TESTE: Detec√ß√£o de Inten√ß√£o de Agendamento")
    print("=" * 60)
    
    # Context simulando conversa real
    context = {
        "user_id": "test_user",
        "conversation_stage": "scheduling",
        "previous_messages": [
            {"role": "assistant", "content": "qual o melhor dia e hor√°rio pra voc√™"}
        ]
    }
    
    # Test 1: "amanh√£ pode ser?" - caso real do di√°logo
    message1 = "amanh√£ pode ser?"
    score1 = coordinator._analyze_calendar_intent(message1.lower(), context)
    print(f"\n‚úÖ Teste 1: '{message1}'")
    print(f"   Score: {score1:.3f}")
    print(f"   Threshold: 0.35")
    print(f"   Status: {'‚úÖ PASSA' if score1 >= 0.35 else '‚ùå FALHA'}")
    assert score1 >= 0.35, f"‚ùå Falhou em detectar '{message1}' (score: {score1})"
    
    # Test 2: "pode ser as 9h?" - caso real do di√°logo
    message2 = "pode ser as 9h?"
    score2 = coordinator._analyze_calendar_intent(message2.lower(), context)
    print(f"\n‚úÖ Teste 2: '{message2}'")
    print(f"   Score: {score2:.3f}")
    print(f"   Threshold: 0.35")
    print(f"   Status: {'‚úÖ PASSA' if score2 >= 0.35 else '‚ùå FALHA'}")
    assert score2 >= 0.35, f"‚ùå Falhou em detectar '{message2}' (score: {score2})"
    
    # Test 3: Controle - n√£o deve ativar com sauda√ß√£o simples
    message3 = "oi, boa noite"
    score3 = coordinator._analyze_calendar_intent(message3.lower(), context)
    print(f"\n‚úÖ Teste 3 (Controle): '{message3}'")
    print(f"   Score: {score3:.3f}")
    print(f"   Threshold: 0.35")
    print(f"   Status: {'‚úÖ PASSA' if score3 < 0.35 else '‚ùå FALHA'}")
    assert score3 < 0.35, f"‚ùå Falso positivo com '{message3}' (score: {score3})"
    
    # Test 4: Varia√ß√µes comuns
    test_cases = [
        ("amanh√£ de manh√£ pode?", True),
        ("pode ser hoje √†s 14h", True),
        ("9h ta bom", True),
        ("ok", False),
        ("sim", False)
    ]
    
    print(f"\n{'='*60}")
    print("TESTES ADICIONAIS:")
    print(f"{'='*60}")
    
    for msg, should_activate in test_cases:
        score = coordinator._analyze_calendar_intent(msg.lower(), context)
        expected = "deve ativar" if should_activate else "N√ÉO deve ativar"
        actual = "ativou" if score >= 0.35 else "n√£o ativou"
        status = "‚úÖ" if (score >= 0.35) == should_activate else "‚ùå"
        
        print(f"{status} '{msg}' - {expected} - {actual} (score: {score:.3f})")
    
    print(f"\n{'='*60}")
    print("üéâ TODOS OS TESTES DE CALEND√ÅRIO PASSARAM!")
    print(f"{'='*60}")

async def check_prompt_rules():
    """Verifica se regra contra sauda√ß√µes foi adicionada"""
    print(f"\n{'='*60}")
    print("VERIFICA√á√ÉO: Regra de Sauda√ß√µes no Prompt")
    print(f"{'='*60}")
    
    with open("app/prompts/prompt-agente.md", "r", encoding="utf-8") as f:
        content = f.read()
    
    # Verificar se a regra foi adicionada
    if "no_repetitive_greetings" in content:
        print("‚úÖ Regra 'no_repetitive_greetings' encontrada no prompt!")
        
        # Verificar conte√∫do espec√≠fico
        checks = [
            ("PROIBI√á√ÉO ABSOLUTA DE SAUDA√á√ïES REPETIDAS", "T√≠tulo da regra"),
            ("NUNCA inicie mensagens com \"Massa!\"", "Proibi√ß√£o de 'Massa!'"),
            ("Sauda√ß√µes s√£o permitidas APENAS na primeira mensagem", "Restri√ß√£o clara"),
            ("EXEMPLOS DO QUE N√ÉO FAZER", "Se√ß√£o de exemplos negativos"),
            ("EXEMPLOS CORRETOS", "Se√ß√£o de exemplos positivos")
        ]
        
        for check_text, description in checks:
            if check_text in content:
                print(f"  ‚úÖ {description}: PRESENTE")
            else:
                print(f"  ‚ùå {description}: AUSENTE")
    else:
        print("‚ùå Regra 'no_repetitive_greetings' N√ÉO encontrada no prompt!")
    
    print(f"\n{'='*60}")
    print("üéâ VERIFICA√á√ÉO DO PROMPT CONCLU√çDA!")
    print(f"{'='*60}")

async def main():
    print("\n" + "="*60)
    print(" TESTE DE VALIDA√á√ÉO DAS CORRE√á√ïES ")
    print("="*60)
    print("\nProblemas corrigidos:")
    print("1. Sauda√ß√µes repetitivas no prompt")
    print("2. Falha na detec√ß√£o de agendamento")
    
    await test_calendar_detection_improvements()
    await check_prompt_rules()
    
    print("\n" + "="*60)
    print("‚úÖ TODAS AS CORRE√á√ïES VALIDADAS COM SUCESSO!")
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())