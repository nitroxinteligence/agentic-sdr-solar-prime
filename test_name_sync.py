#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste simples para verificar se a sincroniza√ß√£o do nome do lead est√° funcionando.
"""

import asyncio
from app.services.crm_sync_service import crm_sync_service

def test_name_sync_payload():
    """Testa se o nome √© inclu√≠do no payload de sincroniza√ß√£o."""
    
    # Simular lead_info com nome
    lead_info = {
        "name": "Jo√£o Silva",
        "phone_number": "5511999999999",
        "bill_value": 150.0,
        "chosen_flow": "Instala√ß√£o Usina Pr√≥pria"
    }
    
    # Simular hist√≥rico de conversa vazio
    conversation_history = []
    
    # Gerar payload de atualiza√ß√£o
    payload = crm_sync_service.get_update_payload(lead_info, conversation_history)
    
    print("=== TESTE DE SINCRONIZA√á√ÉO DO NOME ===")
    print(f"Lead Info: {lead_info}")
    print(f"Payload gerado: {payload}")
    
    # Verifica√ß√µes
    assert payload is not None, "Payload n√£o deveria ser None"
    assert "name" in payload, "Nome deveria estar no payload"
    assert payload["name"] == "Jo√£o Silva", f"Nome esperado: 'Jo√£o Silva', recebido: '{payload['name']}'"
    assert "chosen_flow" in payload, "Chosen flow deveria estar no payload"
    assert "bill_value" in payload, "Bill value deveria estar no payload"
    assert "phone" in payload, "Phone deveria estar no payload"
    assert "tags" in payload, "Tags deveriam estar no payload"
    
    print("‚úÖ Todos os testes passaram!")
    print(f"‚úÖ Nome '{payload['name']}' ser√° sincronizado com o Kommo CRM")
    
    return payload

def test_name_sync_without_name():
    """Testa comportamento quando n√£o h√° nome."""
    
    # Simular lead_info sem nome
    lead_info = {
        "phone_number": "5511999999999",
        "bill_value": 150.0,
        "chosen_flow": "Aluguel de Lote"
    }
    
    conversation_history = []
    payload = crm_sync_service.get_update_payload(lead_info, conversation_history)
    
    print("\n=== TESTE SEM NOME ===")
    print(f"Lead Info: {lead_info}")
    print(f"Payload gerado: {payload}")
    
    # Verifica√ß√µes
    assert payload is not None, "Payload n√£o deveria ser None mesmo sem nome"
    assert "name" not in payload, "Nome n√£o deveria estar no payload quando ausente"
    assert "chosen_flow" in payload, "Chosen flow deveria estar no payload"
    assert "bill_value" in payload, "Bill value deveria estar no payload"
    
    print("‚úÖ Teste sem nome passou!")
    
    return payload

if __name__ == "__main__":
    print("Iniciando testes de sincroniza√ß√£o do nome...\n")
    
    try:
        # Teste 1: Com nome
        payload_with_name = test_name_sync_payload()
        
        # Teste 2: Sem nome
        payload_without_name = test_name_sync_without_name()
        
        print("\n" + "="*50)
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("üîß A sincroniza√ß√£o do nome est√° funcionando corretamente.")
        print("üìã Resumo:")
        print(f"   - Com nome: {len(payload_with_name)} campos sincronizados")
        print(f"   - Sem nome: {len(payload_without_name)} campos sincronizados")
        print("="*50)
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        raise