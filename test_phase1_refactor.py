#!/usr/bin/env python3
"""
Test Phase 1 Refactoring - Valida√ß√£o dos Hotfixes
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.agents.agentic_sdr import create_agentic_sdr, reset_singleton
import time

async def test_singleton_pattern():
    """Testa se o singleton pattern est√° funcionando"""
    print("\nüß™ TESTE 1: Singleton Pattern")
    print("-" * 50)
    
    # Resetar singleton para garantir teste limpo
    await reset_singleton()
    
    # Primeira cria√ß√£o
    start = time.time()
    agent1 = await create_agentic_sdr()
    time1 = time.time() - start
    print(f"‚úÖ Primeira inst√¢ncia criada em {time1:.2f}s")
    
    # Segunda cria√ß√£o (deve retornar mesma inst√¢ncia)
    start = time.time()
    agent2 = await create_agentic_sdr()
    time2 = time.time() - start
    print(f"‚úÖ Segunda inst√¢ncia obtida em {time2:.2f}s")
    
    # Verificar se s√£o a mesma inst√¢ncia
    if agent1 is agent2:
        print("‚úÖ SUCESSO: Singleton funcionando - mesma inst√¢ncia retornada")
    else:
        print("‚ùå FALHA: Inst√¢ncias diferentes criadas")
        return False
    
    # Verificar for√ßa de nova inst√¢ncia
    agent3 = await create_agentic_sdr(force_new_instance=True)
    if agent3 is not agent1:
        print("‚úÖ SUCESSO: force_new_instance cria nova inst√¢ncia")
    else:
        print("‚ùå FALHA: force_new_instance n√£o funcionou")
        return False
    
    return True

async def test_threshold_adjustment():
    """Testa se o threshold foi ajustado corretamente"""
    print("\nüß™ TESTE 2: Threshold Adjustment")
    print("-" * 50)
    
    agent = await create_agentic_sdr()
    
    # Testar com mensagem simples (n√£o deve ativar SDR Team)
    test_cases = [
        {
            "message": "Ol√°, bom dia!",
            "should_activate": False,
            "description": "Sauda√ß√£o simples"
        },
        {
            "message": "Quanto custa o sistema solar?",
            "should_activate": False,
            "description": "Pergunta simples sobre pre√ßo"
        },
        {
            "message": "Quero agendar uma reuni√£o com o Leonardo para discutir proposta",
            "should_activate": True,
            "description": "Solicita√ß√£o clara de agendamento"
        },
        {
            "message": "Preciso verificar a agenda do Leonardo",
            "should_activate": True,
            "description": "Verifica√ß√£o de agenda"
        }
    ]
    
    for test in test_cases:
        should_call, agent_name, reason = await agent.should_call_sdr_team(
            test["message"], {}
        )
        
        if should_call == test["should_activate"]:
            print(f"‚úÖ {test['description']}: {'Ativou' if should_call else 'N√£o ativou'} (esperado)")
        else:
            print(f"‚ùå {test['description']}: {'Ativou' if should_call else 'N√£o ativou'} (inesperado)")
            print(f"   Raz√£o: {reason}")
            return False
    
    print("‚úÖ SUCESSO: Threshold ajustado corretamente")
    return True

async def test_calendar_keywords():
    """Testa se as keywords foram reduzidas"""
    print("\nüß™ TESTE 3: Calendar Keywords Reduction")
    print("-" * 50)
    
    agent = await create_agentic_sdr()
    
    # Testar com palavras que n√£o devem mais ativar
    removed_keywords = [
        "amanh√£",  # Temporal gen√©rico removido
        "hoje",    # Temporal gen√©rico removido
        "manh√£",   # Temporal gen√©rico removido
        "tarde"    # Temporal gen√©rico removido
    ]
    
    for keyword in removed_keywords:
        should_call, _, _ = await agent.should_call_sdr_team(keyword, {})
        if not should_call:
            print(f"‚úÖ '{keyword}' n√£o ativa mais (removido)")
        else:
            print(f"‚ùå '{keyword}' ainda est√° ativando (deveria estar removido)")
            return False
    
    # Testar com keywords essenciais que devem continuar funcionando
    essential_keywords = [
        "agendar reuni√£o",
        "agenda do leonardo",
        "hor√°rios dispon√≠veis"
    ]
    
    for keyword in essential_keywords:
        should_call, agent_name, _ = await agent.should_call_sdr_team(keyword, {})
        if should_call and agent_name == "CalendarAgent":
            print(f"‚úÖ '{keyword}' ativa CalendarAgent (essencial)")
        else:
            print(f"‚ùå '{keyword}' n√£o est√° ativando CalendarAgent")
            return False
    
    print("‚úÖ SUCESSO: Keywords reduzidas para 10 essenciais")
    return True

async def main():
    """Executa todos os testes"""
    print("\n" + "=" * 60)
    print("üöÄ VALIDA√á√ÉO DA FASE 1 - HOTFIXES")
    print("=" * 60)
    
    results = []
    
    # Executar testes
    results.append(await test_singleton_pattern())
    results.append(await test_threshold_adjustment())
    results.append(await test_calendar_keywords())
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    total = len(results)
    passed = sum(results)
    
    if all(results):
        print(f"‚úÖ TODOS OS TESTES PASSARAM ({passed}/{total})")
        print("\nüéâ FASE 1 CONCLU√çDA COM SUCESSO!")
        print("\nüìà MELHORIAS ESPERADAS:")
        print("‚Ä¢ Falsos positivos: 40-50% ‚Üí <10%")
        print("‚Ä¢ Memory usage: 100MB/req ‚Üí 20MB/req")
        print("‚Ä¢ Calendar keywords: 50 ‚Üí 10")
        print("‚Ä¢ Threshold: 0.3 ‚Üí 0.6")
    else:
        print(f"‚ùå ALGUNS TESTES FALHARAM ({passed}/{total})")
        print("Por favor, revise as mudan√ßas e execute novamente.")
    
    print("\nüîÑ PR√ìXIMOS PASSOS: FASE 2 - SIMPLIFICA√á√ÉO")
    print("‚Ä¢ Consolidar SDRTeam + CalendarAgent")
    print("‚Ä¢ Eliminar camadas redundantes")
    print("‚Ä¢ Implementar cache inteligente")

if __name__ == "__main__":
    asyncio.run(main())